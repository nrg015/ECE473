
bar_graph_noints_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000130  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005c4  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c17  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000137f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  9c:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <spi_init>:
#include <util/delay.h>
//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(void){
  DDRB   = (1<<DDB2)|(1<<DDB1)|(1<<DDB0); //output mode for SS, MOSI, SCLK
  a4:	87 e0       	ldi	r24, 0x07	; 7
  a6:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA); //master mode, clk low on idle, leading edge sample
  a8:	80 e5       	ldi	r24, 0x50	; 80
  aa:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (1<<SPI2X); //choose double speed operation
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	8e b9       	out	0x0e, r24	; 14
  b0:	08 95       	ret

000000b2 <main>:
#include <util/delay.h>
//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(void){
  DDRB   = (1<<DDB2)|(1<<DDB1)|(1<<DDB0); //output mode for SS, MOSI, SCLK
  b2:	87 e0       	ldi	r24, 0x07	; 7
  b4:	87 bb       	out	0x17, r24	; 23

  SPCR   = (1<<SPE)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA); //master mode, clk low on idle, leading edge sample
  b6:	80 e5       	ldi	r24, 0x50	; 80
  b8:	8d b9       	out	0x0d, r24	; 13

  SPSR   = (1<<SPI2X); //choose double speed operation
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	8e b9       	out	0x0e, r24	; 14
//**********************************************************************
//                                main                                 
//**********************************************************************
int main(){     

uint8_t display_count = 4; //holds count for display 
  be:	84 e0       	ldi	r24, 0x04	; 4
uint8_t i; //dummy counter

spi_init();  //initalize SPI port
while(1){                             //main while loop

    SPDR = display_count;//send display_count to the display 
  c0:	8f b9       	out	0x0f, r24	; 15

    while (bit_is_clear(SPSR, SPIF)){} //wait till SPI data has been sent out
  c2:	77 9b       	sbis	0x0e, 7	; 14
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <main+0x10>

    PORTB |=  0x01;                   //send rising edge to regclk on HC595 
  c6:	c0 9a       	sbi	0x18, 0	; 24
    PORTB &= ~0x01;                   //send falling edge to regclk on HC595
  c8:	c0 98       	cbi	0x18, 0	; 24

    display_count++;//shift display_count for next time 
  ca:	8f 5f       	subi	r24, 0xFF	; 255

    if(display_count==0x00){display_count=0x01;} //set display_count back to 1st positon
  cc:	09 f4       	brne	.+2      	; 0xd0 <main+0x1e>
  ce:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	31 ee       	ldi	r19, 0xE1	; 225
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x24>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x2e>
  e0:	00 00       	nop
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	31 ee       	ldi	r19, 0xE1	; 225
  e6:	94 e0       	ldi	r25, 0x04	; 4
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x36>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x40>
  f2:	00 00       	nop
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	31 ee       	ldi	r19, 0xE1	; 225
  f8:	94 e0       	ldi	r25, 0x04	; 4
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	30 40       	sbci	r19, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x48>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x52>
 104:	00 00       	nop
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	31 ee       	ldi	r19, 0xE1	; 225
 10a:	94 e0       	ldi	r25, 0x04	; 4
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x5a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x64>
 116:	00 00       	nop
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	31 ee       	ldi	r19, 0xE1	; 225
 11c:	94 e0       	ldi	r25, 0x04	; 4
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x6c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x76>
 128:	00 00       	nop
 12a:	ca cf       	rjmp	.-108    	; 0xc0 <main+0xe>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
