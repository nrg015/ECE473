
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001a24  00001ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  0080012c  0080012c  00001ae4  2**0
                  ALLOC
  3 .stab         00002af0  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001619  00000000  00000000  000045d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005bed  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005c00  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 c1 02 	jmp	0x582	; 0x582 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e2       	ldi	r30, 0x24	; 36
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 32       	cpi	r26, 0x2C	; 44
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ac e2       	ldi	r26, 0x2C	; 44
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3a       	cpi	r26, 0xA4	; 164
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 81 07 	call	0xf02	; 0xf02 <main>
      c6:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
//******************************************************************************
//                            spi_init
// Initializes the SPI port, nothing else.
//
void spi_init(void) {
    DDRF    |= 0x08; //enable LCD?
      ce:	e1 e6       	ldi	r30, 0x61	; 97
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	88 60       	ori	r24, 0x08	; 8
      d6:	80 83       	st	Z, r24
    PORTF   &= 0xF7;
      d8:	e2 e6       	ldi	r30, 0x62	; 98
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	87 7f       	andi	r24, 0xF7	; 247
      e0:	80 83       	st	Z, r24

    DDRB = 0x07;                //Turn on SS, MOSI, SCLK (SS is output)
      e2:	87 e0       	ldi	r24, 0x07	; 7
      e4:	87 bb       	out	0x17, r24	; 23
    PORTB = (1<<PB1);
      e6:	82 e0       	ldi	r24, 0x02	; 2
      e8:	88 bb       	out	0x18, r24	; 24

    SPCR = (1<<SPE)|(1<<MSTR);  //SPI enabled, master, low polarity, MSB 1st
      ea:	80 e5       	ldi	r24, 0x50	; 80
      ec:	8d b9       	out	0x0d, r24	; 13
    SPSR = (1<<SPI2X);          //run at i/o clock/2
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	8e b9       	out	0x0e, r24	; 14
      f2:	08 95       	ret

000000f4 <spi_read>:
//******************************************************************************
//                            spi_read
//Reads the SPI port.
//
uint8_t spi_read(void) {
    SPDR = 0x00;                        //"dummy" write
      f4:	1f b8       	out	0x0f, r1	; 15
    while (bit_is_clear(SPSR,SPIF)){}   //wait till 8 clock cycles are done
      f6:	77 9b       	sbis	0x0e, 7	; 14
      f8:	fe cf       	rjmp	.-4      	; 0xf6 <spi_read+0x2>
    return(SPDR);                       //return incoming data from SPDR
      fa:	8f b1       	in	r24, 0x0f	; 15
}
      fc:	08 95       	ret

000000fe <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.  
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
      fe:	48 2f       	mov	r20, r24
	static uint16_t state[8] = {0};
	state[button] = (state[button]<<1) | (! bit_is_clear(PINA, button)) | 0xE000;
     100:	e8 2f       	mov	r30, r24
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	99 b3       	in	r25, 0x19	; 25
     106:	ee 0f       	add	r30, r30
     108:	ff 1f       	adc	r31, r31
     10a:	e0 5c       	subi	r30, 0xC0	; 192
     10c:	fe 4f       	sbci	r31, 0xFE	; 254
     10e:	20 81       	ld	r18, Z
     110:	31 81       	ldd	r19, Z+1	; 0x01
     112:	22 0f       	add	r18, r18
     114:	33 1f       	adc	r19, r19
     116:	30 6e       	ori	r19, 0xE0	; 224
     118:	89 2f       	mov	r24, r25
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <chk_buttons+0x24>
     11e:	95 95       	asr	r25
     120:	87 95       	ror	r24
     122:	4a 95       	dec	r20
     124:	e2 f7       	brpl	.-8      	; 0x11e <chk_buttons+0x20>
     126:	81 70       	andi	r24, 0x01	; 1
     128:	99 27       	eor	r25, r25
     12a:	28 2b       	or	r18, r24
     12c:	39 2b       	or	r19, r25
     12e:	31 83       	std	Z+1, r19	; 0x01
     130:	20 83       	st	Z, r18
	if (state[button] == 0xF000) return 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	21 15       	cp	r18, r1
     136:	30 4f       	sbci	r19, 0xF0	; 240
     138:	09 f0       	breq	.+2      	; 0x13c <chk_buttons+0x3e>
     13a:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
     13c:	08 95       	ret

0000013e <led_data_update>:
//***********************************************************************************
//                                   LED data update                                    
//takes 4 8-bit binary input values and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void led_data_update(uint8_t hours, uint8_t min, uint8_t colon, uint8_t pm) {
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
	uint8_t h = hours;
    
    if (clock_format) {
     142:	90 91 32 01 	lds	r25, 0x0132
     146:	91 11       	cpse	r25, r1
     148:	5a c0       	rjmp	.+180    	; 0x1fe <led_data_update+0xc0>
     14a:	3d ec       	ldi	r19, 0xCD	; 205
     14c:	83 9f       	mul	r24, r19
     14e:	a1 2d       	mov	r26, r1
     150:	11 24       	eor	r1, r1
     152:	a6 95       	lsr	r26
     154:	a6 95       	lsr	r26
     156:	a6 95       	lsr	r26
     158:	5a e0       	ldi	r21, 0x0A	; 10
     15a:	a5 9f       	mul	r26, r21
     15c:	80 19       	sub	r24, r0
     15e:	11 24       	eor	r1, r1
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	a3 9f       	mul	r26, r19
     164:	31 2d       	mov	r19, r1
     166:	11 24       	eor	r1, r1
     168:	36 95       	lsr	r19
     16a:	36 95       	lsr	r19
     16c:	36 95       	lsr	r19
     16e:	5a e0       	ldi	r21, 0x0A	; 10
     170:	35 9f       	mul	r19, r21
     172:	a0 19       	sub	r26, r0
     174:	11 24       	eor	r1, r1
     176:	b0 e0       	ldi	r27, 0x00	; 0
        if (h > 12) {
            h -= 12;
        }    
    }
 
    segment_data[0] = dec_to_7seg[(min) % 10];
     178:	3d ec       	ldi	r19, 0xCD	; 205
     17a:	63 9f       	mul	r22, r19
     17c:	e1 2d       	mov	r30, r1
     17e:	11 24       	eor	r1, r1
     180:	e6 95       	lsr	r30
     182:	e6 95       	lsr	r30
     184:	e6 95       	lsr	r30
     186:	5a e0       	ldi	r21, 0x0A	; 10
     188:	e5 9f       	mul	r30, r21
     18a:	60 19       	sub	r22, r0
     18c:	11 24       	eor	r1, r1
     18e:	c6 2f       	mov	r28, r22
     190:	d0 e0       	ldi	r29, 0x00	; 0
     192:	c0 50       	subi	r28, 0x00	; 0
     194:	df 4f       	sbci	r29, 0xFF	; 255
     196:	58 81       	ld	r21, Y
     198:	50 93 7f 01 	sts	0x017F, r21
	segment_data[1] = dec_to_7seg[(min/10) % 10];
     19c:	e3 9f       	mul	r30, r19
     19e:	31 2d       	mov	r19, r1
     1a0:	11 24       	eor	r1, r1
     1a2:	36 95       	lsr	r19
     1a4:	36 95       	lsr	r19
     1a6:	36 95       	lsr	r19
     1a8:	5a e0       	ldi	r21, 0x0A	; 10
     1aa:	35 9f       	mul	r19, r21
     1ac:	e0 19       	sub	r30, r0
     1ae:	11 24       	eor	r1, r1
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	e0 50       	subi	r30, 0x00	; 0
     1b4:	ff 4f       	sbci	r31, 0xFF	; 255
     1b6:	30 81       	ld	r19, Z
     1b8:	30 93 80 01 	sts	0x0180, r19
	segment_data[3] = dec_to_7seg[(h) % 10];
     1bc:	fc 01       	movw	r30, r24
     1be:	e0 50       	subi	r30, 0x00	; 0
     1c0:	ff 4f       	sbci	r31, 0xFF	; 255
     1c2:	80 81       	ld	r24, Z
     1c4:	80 93 82 01 	sts	0x0182, r24
	segment_data[4] = dec_to_7seg[(h/10) % 10];
     1c8:	a0 50       	subi	r26, 0x00	; 0
     1ca:	bf 4f       	sbci	r27, 0xFF	; 255
     1cc:	8c 91       	ld	r24, X
     1ce:	80 93 83 01 	sts	0x0183, r24

	if (colon) {
     1d2:	44 23       	and	r20, r20
     1d4:	81 f0       	breq	.+32     	; 0x1f6 <led_data_update+0xb8>
        segment_data[2] = dec_to_7seg[10];
     1d6:	80 91 0a 01 	lds	r24, 0x010A
     1da:	80 93 81 01 	sts	0x0181, r24
    
    else{
        segment_data[2] = 0xFF;
    }

    if (pm) {
     1de:	22 23       	and	r18, r18
     1e0:	39 f0       	breq	.+14     	; 0x1f0 <led_data_update+0xb2>
        segment_data[2] &= dec_to_7seg[11];
     1e2:	90 91 0b 01 	lds	r25, 0x010B
     1e6:	80 91 81 01 	lds	r24, 0x0181
     1ea:	89 23       	and	r24, r25
     1ec:	80 93 81 01 	sts	0x0181, r24
    }

	return;
}//led_data_update
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret
	if (colon) {
        segment_data[2] = dec_to_7seg[10];
    }   
    
    else{
        segment_data[2] = 0xFF;
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	80 93 81 01 	sts	0x0181, r24
     1fc:	f0 cf       	rjmp	.-32     	; 0x1de <led_data_update+0xa0>
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void led_data_update(uint8_t hours, uint8_t min, uint8_t colon, uint8_t pm) {
	uint8_t h = hours;
    
    if (clock_format) {
        if (h == 0) {
     1fe:	88 23       	and	r24, r24
     200:	81 f0       	breq	.+32     	; 0x222 <led_data_update+0xe4>
            h = 12;
        }
        
        if (h > 12) {
     202:	8d 30       	cpi	r24, 0x0D	; 13
     204:	08 f4       	brcc	.+2      	; 0x208 <led_data_update+0xca>
     206:	a1 cf       	rjmp	.-190    	; 0x14a <led_data_update+0xc>
            h -= 12;
     208:	8c 50       	subi	r24, 0x0C	; 12
     20a:	3d ec       	ldi	r19, 0xCD	; 205
     20c:	83 9f       	mul	r24, r19
     20e:	a1 2d       	mov	r26, r1
     210:	11 24       	eor	r1, r1
     212:	a6 95       	lsr	r26
     214:	a6 95       	lsr	r26
     216:	a6 95       	lsr	r26
     218:	9a e0       	ldi	r25, 0x0A	; 10
     21a:	a9 9f       	mul	r26, r25
     21c:	80 19       	sub	r24, r0
     21e:	11 24       	eor	r1, r1
     220:	9f cf       	rjmp	.-194    	; 0x160 <led_data_update+0x22>
     222:	a1 e0       	ldi	r26, 0x01	; 1
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	a6 cf       	rjmp	.-180    	; 0x178 <led_data_update+0x3a>

0000022c <button_togg>:
//***********************************************************************************

//***********************************************************************************
//                                  button_togg
void button_togg(uint8_t val) {
    if (val == 0) {
     22c:	81 11       	cpse	r24, r1
     22e:	04 c0       	rjmp	.+8      	; 0x238 <button_togg+0xc>
        snooze = 0x01;
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	80 93 2c 01 	sts	0x012C, r24
     236:	08 95       	ret
    }
    if (val == 1) {
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	39 f5       	brne	.+78     	; 0x28a <button_togg+0x5e>
        if(volume < 0.6) {
     23c:	60 91 0c 01 	lds	r22, 0x010C
     240:	70 91 0d 01 	lds	r23, 0x010D
     244:	80 91 0e 01 	lds	r24, 0x010E
     248:	90 91 0f 01 	lds	r25, 0x010F
     24c:	2a e9       	ldi	r18, 0x9A	; 154
     24e:	39 e9       	ldi	r19, 0x99	; 153
     250:	49 e1       	ldi	r20, 0x19	; 25
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__cmpsf2>
     258:	87 ff       	sbrs	r24, 7
     25a:	48 c0       	rjmp	.+144    	; 0x2ec <button_togg+0xc0>
            volume += 0.1;
     25c:	60 91 0c 01 	lds	r22, 0x010C
     260:	70 91 0d 01 	lds	r23, 0x010D
     264:	80 91 0e 01 	lds	r24, 0x010E
     268:	90 91 0f 01 	lds	r25, 0x010F
     26c:	2d ec       	ldi	r18, 0xCD	; 205
     26e:	3c ec       	ldi	r19, 0xCC	; 204
     270:	4c ec       	ldi	r20, 0xCC	; 204
     272:	5d e3       	ldi	r21, 0x3D	; 61
     274:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__addsf3>
     278:	60 93 0c 01 	sts	0x010C, r22
     27c:	70 93 0d 01 	sts	0x010D, r23
     280:	80 93 0e 01 	sts	0x010E, r24
     284:	90 93 0f 01 	sts	0x010F, r25
     288:	08 95       	ret
        } 
    }
    if (val == 2) {
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	81 f5       	brne	.+96     	; 0x2ee <button_togg+0xc2>
        if (volume > 0.2) {
     28e:	60 91 0c 01 	lds	r22, 0x010C
     292:	70 91 0d 01 	lds	r23, 0x010D
     296:	80 91 0e 01 	lds	r24, 0x010E
     29a:	90 91 0f 01 	lds	r25, 0x010F
     29e:	2d ec       	ldi	r18, 0xCD	; 205
     2a0:	3c ec       	ldi	r19, 0xCC	; 204
     2a2:	4c e4       	ldi	r20, 0x4C	; 76
     2a4:	5e e3       	ldi	r21, 0x3E	; 62
     2a6:	0e 94 92 09 	call	0x1324	; 0x1324 <__gesf2>
     2aa:	18 16       	cp	r1, r24
     2ac:	fc f4       	brge	.+62     	; 0x2ec <button_togg+0xc0>
            volume -= 0.1;
     2ae:	60 91 0c 01 	lds	r22, 0x010C
     2b2:	70 91 0d 01 	lds	r23, 0x010D
     2b6:	80 91 0e 01 	lds	r24, 0x010E
     2ba:	90 91 0f 01 	lds	r25, 0x010F
     2be:	2d ec       	ldi	r18, 0xCD	; 205
     2c0:	3c ec       	ldi	r19, 0xCC	; 204
     2c2:	4c ec       	ldi	r20, 0xCC	; 204
     2c4:	5d e3       	ldi	r21, 0x3D	; 61
     2c6:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__subsf3>
     2ca:	60 93 0c 01 	sts	0x010C, r22
     2ce:	70 93 0d 01 	sts	0x010D, r23
     2d2:	80 93 0e 01 	sts	0x010E, r24
     2d6:	90 93 0f 01 	sts	0x010F, r25
     2da:	08 95       	ret
            time[MIN] = new_time[MIN];
            time[SEC] = 0x00;
            set_clock[1] = 0;
        }
    }
    if (val == 7) {
     2dc:	87 30       	cpi	r24, 0x07	; 7
     2de:	31 f4       	brne	.+12     	; 0x2ec <button_togg+0xc0>
        set_clock[1] ^= 0x01;              //allows user to input clock
     2e0:	90 91 34 01 	lds	r25, 0x0134
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	89 27       	eor	r24, r25
     2e8:	80 93 34 01 	sts	0x0134, r24
     2ec:	08 95       	ret
    if (val == 2) {
        if (volume > 0.2) {
            volume -= 0.1;
        }
    }
    if (val == 3) {
     2ee:	83 30       	cpi	r24, 0x03	; 3
     2f0:	11 f5       	brne	.+68     	; 0x336 <button_togg+0x10a>
        if (set_alarm[0]) {
     2f2:	80 91 30 01 	lds	r24, 0x0130
     2f6:	88 23       	and	r24, r24
     2f8:	51 f0       	breq	.+20     	; 0x30e <button_togg+0xe2>
            alarm[HOUR] = new_time[HOUR];
     2fa:	80 91 35 01 	lds	r24, 0x0135
     2fe:	80 93 2d 01 	sts	0x012D, r24
            alarm[MIN] = new_time[MIN];
     302:	80 91 36 01 	lds	r24, 0x0136
     306:	80 93 2e 01 	sts	0x012E, r24
            set_alarm[0] = 0x00;
     30a:	10 92 30 01 	sts	0x0130, r1
        }
        set_alarm[1] ^= 0x01;              //arms alarm
     30e:	90 91 31 01 	lds	r25, 0x0131
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	89 27       	eor	r24, r25
     316:	80 93 31 01 	sts	0x0131, r24
        
        if (set_alarm[1]) {
     31a:	80 91 31 01 	lds	r24, 0x0131
     31e:	88 23       	and	r24, r24
     320:	29 f0       	breq	.+10     	; 0x32c <button_togg+0x100>
            string2lcd("Alarm Armed");
     322:	81 e1       	ldi	r24, 0x11	; 17
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 45 05 	call	0xa8a	; 0xa8a <string2lcd>
     32a:	08 95       	ret
        }
        else {
            clear_display();
     32c:	0e 94 0b 05 	call	0xa16	; 0xa16 <clear_display>
            cursor_home();
     330:	0e 94 16 05 	call	0xa2c	; 0xa2c <cursor_home>
     334:	08 95       	ret
        }
    }
    if (val == 4) {
     336:	84 30       	cpi	r24, 0x04	; 4
     338:	39 f4       	brne	.+14     	; 0x348 <button_togg+0x11c>
        set_alarm[0] ^= 0x01;              //allows user to input alarm
     33a:	90 91 30 01 	lds	r25, 0x0130
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	89 27       	eor	r24, r25
     342:	80 93 30 01 	sts	0x0130, r24
     346:	08 95       	ret
    }
    if (val == 5) {
     348:	85 30       	cpi	r24, 0x05	; 5
     34a:	39 f4       	brne	.+14     	; 0x35a <button_togg+0x12e>
        clock_format ^= 1;                 //24 or 12 hour format
     34c:	90 91 32 01 	lds	r25, 0x0132
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	89 27       	eor	r24, r25
     354:	80 93 32 01 	sts	0x0132, r24
     358:	08 95       	ret
    }
    if (val == 6) {
     35a:	86 30       	cpi	r24, 0x06	; 6
     35c:	09 f0       	breq	.+2      	; 0x360 <button_togg+0x134>
     35e:	be cf       	rjmp	.-132    	; 0x2dc <button_togg+0xb0>
        if (set_clock[1]) {                 //pushes update to clock
     360:	80 91 34 01 	lds	r24, 0x0134
     364:	88 23       	and	r24, r24
     366:	11 f2       	breq	.-124    	; 0x2ec <button_togg+0xc0>
            time[HOUR] = new_time[HOUR];
     368:	80 91 35 01 	lds	r24, 0x0135
     36c:	80 93 38 01 	sts	0x0138, r24
            time[MIN] = new_time[MIN];
     370:	80 91 36 01 	lds	r24, 0x0136
     374:	80 93 39 01 	sts	0x0139, r24
            time[SEC] = 0x00;
     378:	10 92 3a 01 	sts	0x013A, r1
            set_clock[1] = 0;
     37c:	10 92 34 01 	sts	0x0134, r1
     380:	08 95       	ret

00000382 <update_bar>:
//***********************************************************************************

//***********************************************************************************
//                                  update_bar
void update_bar(uint8_t mode) {
    SPDR = mode;        //send data
     382:	8f b9       	out	0x0f, r24	; 15
    while(bit_is_clear(SPSR, SPIF)) {} //transfer
     384:	77 9b       	sbis	0x0e, 7	; 14
     386:	fe cf       	rjmp	.-4      	; 0x384 <update_bar+0x2>
    
    PORTD |= 0x04;      //send rising edge
     388:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= ~0x04;     //send falling edge
     38a:	92 98       	cbi	0x12, 2	; 18
     38c:	08 95       	ret

0000038e <read_enc>:
//***********************************************************************************

//***********************************************************************************
//                                  read_enc

void read_enc() {
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <read_enc+0x6>
     394:	00 d0       	rcall	.+0      	; 0x396 <read_enc+0x8>
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
    uint8_t enc_A[2], enc_B[2];
    uint8_t data;
    uint8_t j = 2;

    PORTE |= 0x40;
     39a:	1e 9a       	sbi	0x03, 6	; 3
    PORTE &= ~0x20;
     39c:	1d 98       	cbi	0x03, 5	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     39e:	8f e9       	ldi	r24, 0x9F	; 159
     3a0:	9f e0       	ldi	r25, 0x0F	; 15
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <read_enc+0x14>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <read_enc+0x1a>
     3a8:	00 00       	nop
    _delay_ms(1);

    PORTE |= 0x20;
     3aa:	1d 9a       	sbi	0x03, 5	; 3
    PORTE &= ~0x40;
     3ac:	1e 98       	cbi	0x03, 6	; 3
//******************************************************************************
//                            spi_read
//Reads the SPI port.
//
uint8_t spi_read(void) {
    SPDR = 0x00;                        //"dummy" write
     3ae:	1f b8       	out	0x0f, r1	; 15
    while (bit_is_clear(SPSR,SPIF)){}   //wait till 8 clock cycles are done
     3b0:	77 9b       	sbis	0x0e, 7	; 14
     3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <read_enc+0x22>
    return(SPDR);                       //return incoming data from SPDR
     3b4:	8f b1       	in	r24, 0x0f	; 15
    PORTE |= 0x20;
    PORTE &= ~0x40;
    
    data = spi_read();

    enc_B[0] = data & 0x01;
     3b6:	98 2f       	mov	r25, r24
     3b8:	91 70       	andi	r25, 0x01	; 1
     3ba:	99 83       	std	Y+1, r25	; 0x01
    enc_A[0] = data & 0x02;
     3bc:	98 2f       	mov	r25, r24
     3be:	92 70       	andi	r25, 0x02	; 2
     3c0:	9b 83       	std	Y+3, r25	; 0x03
    enc_B[1] = data & 0x04;
     3c2:	98 2f       	mov	r25, r24
     3c4:	94 70       	andi	r25, 0x04	; 4
     3c6:	9a 83       	std	Y+2, r25	; 0x02
    enc_A[1] = data & 0x08;
     3c8:	88 70       	andi	r24, 0x08	; 8
     3ca:	8c 83       	std	Y+4, r24	; 0x04
  
    for (i = 0; i<2; i++) {
     3cc:	10 92 3f 01 	sts	0x013F, r1
     3d0:	80 91 3f 01 	lds	r24, 0x013F
     3d4:	82 30       	cpi	r24, 0x02	; 2
     3d6:	08 f0       	brcs	.+2      	; 0x3da <read_enc+0x4c>
     3d8:	b1 c0       	rjmp	.+354    	; 0x53c <read_enc+0x1ae>
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	6a c0       	rjmp	.+212    	; 0x4b2 <read_enc+0x124>
        j--;
        
        if(enc_A[i] != enc_prevA[i]) {
            if(enc_A[i]) {
                if(!enc_B[i]) {
     3de:	80 91 3f 01 	lds	r24, 0x013F
     3e2:	e1 e0       	ldi	r30, 0x01	; 1
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	ec 0f       	add	r30, r28
     3e8:	fd 1f       	adc	r31, r29
     3ea:	e8 0f       	add	r30, r24
     3ec:	f1 1d       	adc	r31, r1
     3ee:	80 81       	ld	r24, Z
                    new_time[j] += 1;
     3f0:	e9 2f       	mov	r30, r25
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	eb 5c       	subi	r30, 0xCB	; 203
     3f6:	fe 4f       	sbci	r31, 0xFE	; 254
    for (i = 0; i<2; i++) {
        j--;
        
        if(enc_A[i] != enc_prevA[i]) {
            if(enc_A[i]) {
                if(!enc_B[i]) {
     3f8:	81 11       	cpse	r24, r1
     3fa:	88 c0       	rjmp	.+272    	; 0x50c <read_enc+0x17e>
                    new_time[j] -= 1;
                }
            }
            else {
                if(enc_B[i]) {
                    new_time[j] += 1;
     3fc:	80 81       	ld	r24, Z
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	80 83       	st	Z, r24
                else {
                    new_time[j] -= 1;
                }
            }
        }
        enc_prevA[i] = enc_A[i];            
     402:	e0 91 3f 01 	lds	r30, 0x013F
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 91 3f 01 	lds	r24, 0x013F
     40c:	a3 e0       	ldi	r26, 0x03	; 3
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	ac 0f       	add	r26, r28
     412:	bd 1f       	adc	r27, r29
     414:	a8 0f       	add	r26, r24
     416:	b1 1d       	adc	r27, r1
     418:	8c 91       	ld	r24, X
     41a:	ef 5a       	subi	r30, 0xAF	; 175
     41c:	fe 4f       	sbci	r31, 0xFE	; 254
     41e:	80 83       	st	Z, r24
        if(enc_B[i] != enc_prevB[i]) {
     420:	20 91 3f 01 	lds	r18, 0x013F
     424:	e0 91 3f 01 	lds	r30, 0x013F
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	eb 58       	subi	r30, 0x8B	; 139
     42c:	fe 4f       	sbci	r31, 0xFE	; 254
     42e:	80 81       	ld	r24, Z
     430:	e1 e0       	ldi	r30, 0x01	; 1
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	ec 0f       	add	r30, r28
     436:	fd 1f       	adc	r31, r29
     438:	e2 0f       	add	r30, r18
     43a:	f1 1d       	adc	r31, r1
     43c:	20 81       	ld	r18, Z
     43e:	28 17       	cp	r18, r24
     440:	f9 f0       	breq	.+62     	; 0x480 <read_enc+0xf2>
            if(enc_B[i]) {
     442:	80 91 3f 01 	lds	r24, 0x013F
     446:	e1 e0       	ldi	r30, 0x01	; 1
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	ec 0f       	add	r30, r28
     44c:	fd 1f       	adc	r31, r29
     44e:	e8 0f       	add	r30, r24
     450:	f1 1d       	adc	r31, r1
     452:	80 81       	ld	r24, Z
     454:	88 23       	and	r24, r24
     456:	09 f4       	brne	.+2      	; 0x45a <read_enc+0xcc>
     458:	5d c0       	rjmp	.+186    	; 0x514 <read_enc+0x186>
                if(enc_A[i]) {
     45a:	80 91 3f 01 	lds	r24, 0x013F
     45e:	e3 e0       	ldi	r30, 0x03	; 3
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	ec 0f       	add	r30, r28
     464:	fd 1f       	adc	r31, r29
     466:	e8 0f       	add	r30, r24
     468:	f1 1d       	adc	r31, r1
     46a:	80 81       	ld	r24, Z
                    new_time[j] += 1;
     46c:	e9 2f       	mov	r30, r25
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	eb 5c       	subi	r30, 0xCB	; 203
     472:	fe 4f       	sbci	r31, 0xFE	; 254
            }
        }
        enc_prevA[i] = enc_A[i];            
        if(enc_B[i] != enc_prevB[i]) {
            if(enc_B[i]) {
                if(enc_A[i]) {
     474:	88 23       	and	r24, r24
     476:	09 f4       	brne	.+2      	; 0x47a <read_enc+0xec>
     478:	5d c0       	rjmp	.+186    	; 0x534 <read_enc+0x1a6>
                    new_time[j] -= 1;
                }
            }
            else {
                if(!enc_A[i]) {
                    new_time[j] += 1;
     47a:	80 81       	ld	r24, Z
     47c:	8f 5f       	subi	r24, 0xFF	; 255
     47e:	80 83       	st	Z, r24
                else {
                    new_time[j] -= 1;
                }
            }
        }
        enc_prevB[i] = enc_B[i];            
     480:	e0 91 3f 01 	lds	r30, 0x013F
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 91 3f 01 	lds	r24, 0x013F
     48a:	a1 e0       	ldi	r26, 0x01	; 1
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	ac 0f       	add	r26, r28
     490:	bd 1f       	adc	r27, r29
     492:	a8 0f       	add	r26, r24
     494:	b1 1d       	adc	r27, r1
     496:	8c 91       	ld	r24, X
     498:	eb 58       	subi	r30, 0x8B	; 139
     49a:	fe 4f       	sbci	r31, 0xFE	; 254
     49c:	80 83       	st	Z, r24
    enc_B[0] = data & 0x01;
    enc_A[0] = data & 0x02;
    enc_B[1] = data & 0x04;
    enc_A[1] = data & 0x08;
  
    for (i = 0; i<2; i++) {
     49e:	80 91 3f 01 	lds	r24, 0x013F
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	80 93 3f 01 	sts	0x013F, r24
     4a8:	80 91 3f 01 	lds	r24, 0x013F
     4ac:	82 30       	cpi	r24, 0x02	; 2
     4ae:	08 f0       	brcs	.+2      	; 0x4b2 <read_enc+0x124>
     4b0:	45 c0       	rjmp	.+138    	; 0x53c <read_enc+0x1ae>
        j--;
     4b2:	91 50       	subi	r25, 0x01	; 1
        
        if(enc_A[i] != enc_prevA[i]) {
     4b4:	20 91 3f 01 	lds	r18, 0x013F
     4b8:	e0 91 3f 01 	lds	r30, 0x013F
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ef 5a       	subi	r30, 0xAF	; 175
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	80 81       	ld	r24, Z
     4c4:	e3 e0       	ldi	r30, 0x03	; 3
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	ec 0f       	add	r30, r28
     4ca:	fd 1f       	adc	r31, r29
     4cc:	e2 0f       	add	r30, r18
     4ce:	f1 1d       	adc	r31, r1
     4d0:	20 81       	ld	r18, Z
     4d2:	28 17       	cp	r18, r24
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <read_enc+0x14a>
     4d6:	95 cf       	rjmp	.-214    	; 0x402 <read_enc+0x74>
            if(enc_A[i]) {
     4d8:	80 91 3f 01 	lds	r24, 0x013F
     4dc:	e3 e0       	ldi	r30, 0x03	; 3
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	ec 0f       	add	r30, r28
     4e2:	fd 1f       	adc	r31, r29
     4e4:	e8 0f       	add	r30, r24
     4e6:	f1 1d       	adc	r31, r1
     4e8:	80 81       	ld	r24, Z
     4ea:	81 11       	cpse	r24, r1
     4ec:	78 cf       	rjmp	.-272    	; 0x3de <read_enc+0x50>
                else {
                    new_time[j] -= 1;
                }
            }
            else {
                if(enc_B[i]) {
     4ee:	80 91 3f 01 	lds	r24, 0x013F
     4f2:	e1 e0       	ldi	r30, 0x01	; 1
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	ec 0f       	add	r30, r28
     4f8:	fd 1f       	adc	r31, r29
     4fa:	e8 0f       	add	r30, r24
     4fc:	f1 1d       	adc	r31, r1
     4fe:	80 81       	ld	r24, Z
                    new_time[j] += 1;
     500:	e9 2f       	mov	r30, r25
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	eb 5c       	subi	r30, 0xCB	; 203
     506:	fe 4f       	sbci	r31, 0xFE	; 254
                else {
                    new_time[j] -= 1;
                }
            }
            else {
                if(enc_B[i]) {
     508:	81 11       	cpse	r24, r1
     50a:	78 cf       	rjmp	.-272    	; 0x3fc <read_enc+0x6e>
                    new_time[j] += 1;
                }
                else {
                    new_time[j] -= 1;
     50c:	80 81       	ld	r24, Z
     50e:	81 50       	subi	r24, 0x01	; 1
     510:	80 83       	st	Z, r24
     512:	77 cf       	rjmp	.-274    	; 0x402 <read_enc+0x74>
                else {
                    new_time[j] -= 1;
                }
            }
            else {
                if(!enc_A[i]) {
     514:	80 91 3f 01 	lds	r24, 0x013F
     518:	e3 e0       	ldi	r30, 0x03	; 3
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	ec 0f       	add	r30, r28
     51e:	fd 1f       	adc	r31, r29
     520:	e8 0f       	add	r30, r24
     522:	f1 1d       	adc	r31, r1
     524:	80 81       	ld	r24, Z
                    new_time[j] += 1;
     526:	e9 2f       	mov	r30, r25
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	eb 5c       	subi	r30, 0xCB	; 203
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
                else {
                    new_time[j] -= 1;
                }
            }
            else {
                if(!enc_A[i]) {
     52e:	88 23       	and	r24, r24
     530:	09 f4       	brne	.+2      	; 0x534 <read_enc+0x1a6>
     532:	a3 cf       	rjmp	.-186    	; 0x47a <read_enc+0xec>
                    new_time[j] += 1;
                }
                else {
                    new_time[j] -= 1;
     534:	80 81       	ld	r24, Z
     536:	81 50       	subi	r24, 0x01	; 1
     538:	80 83       	st	Z, r24
     53a:	a2 cf       	rjmp	.-188    	; 0x480 <read_enc+0xf2>
            }
        }
        enc_prevB[i] = enc_B[i];            
    }
    return;
}
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <__vector_21>:
//***********************************************************************************

ISR(ADC_vect) {
     54a:	1f 92       	push	r1
     54c:	0f 92       	push	r0
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	0f 92       	push	r0
     552:	11 24       	eor	r1, r1

}
     554:	0f 90       	pop	r0
     556:	0f be       	out	0x3f, r0	; 63
     558:	0f 90       	pop	r0
     55a:	1f 90       	pop	r1
     55c:	18 95       	reti

0000055e <__vector_12>:

ISR(TIMER1_COMPA_vect) {
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
    PORTC = PORTC ^ 0x3;
     56c:	95 b3       	in	r25, 0x15	; 21
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	89 27       	eor	r24, r25
     572:	85 bb       	out	0x15, r24	; 21
}
     574:	9f 91       	pop	r25
     576:	8f 91       	pop	r24
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <__vector_16>:

ISR(TIMER0_OVF_vect) {
     582:	1f 92       	push	r1
     584:	0f 92       	push	r0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	0f 92       	push	r0
     58a:	11 24       	eor	r1, r1
     58c:	0b b6       	in	r0, 0x3b	; 59
     58e:	0f 92       	push	r0
     590:	1f 93       	push	r17
     592:	2f 93       	push	r18
     594:	3f 93       	push	r19
     596:	4f 93       	push	r20
     598:	5f 93       	push	r21
     59a:	6f 93       	push	r22
     59c:	7f 93       	push	r23
     59e:	8f 93       	push	r24
     5a0:	9f 93       	push	r25
     5a2:	af 93       	push	r26
     5a4:	bf 93       	push	r27
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	ef 93       	push	r30
     5ac:	ff 93       	push	r31
	//Clock Handling
    count++;
     5ae:	80 91 3c 01 	lds	r24, 0x013C
     5b2:	90 91 3d 01 	lds	r25, 0x013D
     5b6:	01 96       	adiw	r24, 0x01	; 1
     5b8:	90 93 3d 01 	sts	0x013D, r25
     5bc:	80 93 3c 01 	sts	0x013C, r24
    display_counter++;
     5c0:	80 91 3b 01 	lds	r24, 0x013B
     5c4:	8f 5f       	subi	r24, 0xFF	; 255
     5c6:	80 93 3b 01 	sts	0x013B, r24

    if (display_counter == 256) {
     5ca:	80 91 3b 01 	lds	r24, 0x013B
        display_counter = 0;
    }

    if ((count%32) == 0) {
     5ce:	80 91 3c 01 	lds	r24, 0x013C
     5d2:	90 91 3d 01 	lds	r25, 0x013D
     5d6:	8f 71       	andi	r24, 0x1F	; 31
     5d8:	99 27       	eor	r25, r25
     5da:	89 2b       	or	r24, r25
     5dc:	31 f4       	brne	.+12     	; 0x5ea <__vector_16+0x68>
        set_clock[0] ^= 0x01;    
     5de:	90 91 33 01 	lds	r25, 0x0133
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	89 27       	eor	r24, r25
     5e6:	80 93 33 01 	sts	0x0133, r24
    }
    
    if (count == 128) 
     5ea:	80 91 3c 01 	lds	r24, 0x013C
     5ee:	90 91 3d 01 	lds	r25, 0x013D
     5f2:	80 38       	cpi	r24, 0x80	; 128
     5f4:	91 05       	cpc	r25, r1
     5f6:	09 f4       	brne	.+2      	; 0x5fa <__vector_16+0x78>
     5f8:	d2 c0       	rjmp	.+420    	; 0x79e <__vector_16+0x21c>
            }
        }    
    }

    //PM or AM
    if (time[HOUR] >= 12) 
     5fa:	80 91 38 01 	lds	r24, 0x0138
     5fe:	8c 30       	cpi	r24, 0x0C	; 12
     600:	0c f4       	brge	.+2      	; 0x604 <__vector_16+0x82>
     602:	71 c0       	rjmp	.+226    	; 0x6e6 <__vector_16+0x164>
    {
        pm = 1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 3e 01 	sts	0x013E, r24
    {
        pm = 0;
    }
    
    // Button/Encoder Handling
    uint8_t portB_temp = PORTB;
     60a:	d8 b3       	in	r29, 0x18	; 24
    uint8_t portA_temp = PORTA;
     60c:	cb b3       	in	r28, 0x1b	; 27
    uint8_t temp = i;
     60e:	10 91 3f 01 	lds	r17, 0x013F
  	DDRA = 0x00; //make PORTA an input port with pullups
     612:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; 
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	8b bb       	out	0x1b, r24	; 27
  	PORTB = 0x70; //enable tristate buffer for pushbutton switches
     618:	80 e7       	ldi	r24, 0x70	; 112
     61a:	88 bb       	out	0x18, r24	; 24
			      //The logic for tristate buffer to be enabled is 
			      //111 for bits 4-6. (01110000)
 	
    for (i=0; i<8; i++) { //now check each button and increment the count as needed
     61c:	10 92 3f 01 	sts	0x013F, r1
     620:	80 91 3f 01 	lds	r24, 0x013F
     624:	88 30       	cpi	r24, 0x08	; 8
     626:	50 f0       	brcs	.+20     	; 0x63c <__vector_16+0xba>
     628:	2c c0       	rjmp	.+88     	; 0x682 <__vector_16+0x100>
     62a:	80 91 3f 01 	lds	r24, 0x013F
     62e:	8f 5f       	subi	r24, 0xFF	; 255
     630:	80 93 3f 01 	sts	0x013F, r24
     634:	80 91 3f 01 	lds	r24, 0x013F
     638:	88 30       	cpi	r24, 0x08	; 8
     63a:	18 f5       	brcc	.+70     	; 0x682 <__vector_16+0x100>
        if (chk_buttons(i)) {
     63c:	40 91 3f 01 	lds	r20, 0x013F
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
	static uint16_t state[8] = {0};
	state[button] = (state[button]<<1) | (! bit_is_clear(PINA, button)) | 0xE000;
     640:	e4 2f       	mov	r30, r20
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	99 b3       	in	r25, 0x19	; 25
     646:	ee 0f       	add	r30, r30
     648:	ff 1f       	adc	r31, r31
     64a:	e0 5c       	subi	r30, 0xC0	; 192
     64c:	fe 4f       	sbci	r31, 0xFE	; 254
     64e:	20 81       	ld	r18, Z
     650:	31 81       	ldd	r19, Z+1	; 0x01
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	30 6e       	ori	r19, 0xE0	; 224
     658:	89 2f       	mov	r24, r25
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <__vector_16+0xe0>
     65e:	95 95       	asr	r25
     660:	87 95       	ror	r24
     662:	4a 95       	dec	r20
     664:	e2 f7       	brpl	.-8      	; 0x65e <__vector_16+0xdc>
     666:	81 70       	andi	r24, 0x01	; 1
     668:	99 27       	eor	r25, r25
     66a:	82 2b       	or	r24, r18
     66c:	93 2b       	or	r25, r19
     66e:	91 83       	std	Z+1, r25	; 0x01
     670:	80 83       	st	Z, r24
	if (state[button] == 0xF000) return 1;
     672:	81 15       	cp	r24, r1
     674:	90 4f       	sbci	r25, 0xF0	; 240
     676:	c9 f6       	brne	.-78     	; 0x62a <__vector_16+0xa8>
			      //The logic for tristate buffer to be enabled is 
			      //111 for bits 4-6. (01110000)
 	
    for (i=0; i<8; i++) { //now check each button and increment the count as needed
        if (chk_buttons(i)) {
            button_togg(i);	
     678:	80 91 3f 01 	lds	r24, 0x013F
     67c:	0e 94 16 01 	call	0x22c	; 0x22c <button_togg>
     680:	d4 cf       	rjmp	.-88     	; 0x62a <__vector_16+0xa8>
        }
	}//for loop

  	PORTB = 0x01; //disable tristate buffer for pushbutton switches
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	88 bb       	out	0x18, r24	; 24
    DDRA = 0xFF;
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	8a bb       	out	0x1a, r24	; 26

    if (set_alarm[1] == 0x07) {
     68a:	80 91 31 01 	lds	r24, 0x0131
     68e:	87 30       	cpi	r24, 0x07	; 7
     690:	09 f4       	brne	.+2      	; 0x694 <__vector_16+0x112>
     692:	3f c0       	rjmp	.+126    	; 0x712 <__vector_16+0x190>
    //else if(volume == 0.6) {
    //   set_alarm[1] ^= 0xF8;    
    //}
  

    update_bar(set_alarm[1]);
     694:	80 91 31 01 	lds	r24, 0x0131
//***********************************************************************************

//***********************************************************************************
//                                  update_bar
void update_bar(uint8_t mode) {
    SPDR = mode;        //send data
     698:	8f b9       	out	0x0f, r24	; 15
    while(bit_is_clear(SPSR, SPIF)) {} //transfer
     69a:	77 9b       	sbis	0x0e, 7	; 14
     69c:	fe cf       	rjmp	.-4      	; 0x69a <__vector_16+0x118>
    
    PORTD |= 0x04;      //send rising edge
     69e:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= ~0x04;     //send falling edge
     6a0:	92 98       	cbi	0x12, 2	; 18
  

    update_bar(set_alarm[1]);

    //if clock is being set, encoders take in user input
    if(set_clock[1] | set_alarm[0]) {
     6a2:	80 91 34 01 	lds	r24, 0x0134
     6a6:	90 91 30 01 	lds	r25, 0x0130
     6aa:	89 2b       	or	r24, r25
     6ac:	f9 f4       	brne	.+62     	; 0x6ec <__vector_16+0x16a>
        else {
            pm = 0;
        }
    }    
    
    i = temp;
     6ae:	10 93 3f 01 	sts	0x013F, r17
    PORTB = portB_temp;
     6b2:	d8 bb       	out	0x18, r29	; 24
    DDRA = 0xFF;
     6b4:	8f ef       	ldi	r24, 0xFF	; 255
     6b6:	8a bb       	out	0x1a, r24	; 26
    PORTA = portA_temp;
     6b8:	cb bb       	out	0x1b, r28	; 27
}//TIMER0_COMP_vect
     6ba:	ff 91       	pop	r31
     6bc:	ef 91       	pop	r30
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	bf 91       	pop	r27
     6c4:	af 91       	pop	r26
     6c6:	9f 91       	pop	r25
     6c8:	8f 91       	pop	r24
     6ca:	7f 91       	pop	r23
     6cc:	6f 91       	pop	r22
     6ce:	5f 91       	pop	r21
     6d0:	4f 91       	pop	r20
     6d2:	3f 91       	pop	r19
     6d4:	2f 91       	pop	r18
     6d6:	1f 91       	pop	r17
     6d8:	0f 90       	pop	r0
     6da:	0b be       	out	0x3b, r0	; 59
     6dc:	0f 90       	pop	r0
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	0f 90       	pop	r0
     6e2:	1f 90       	pop	r1
     6e4:	18 95       	reti
    {
        pm = 1;
    }
    else 
    {
        pm = 0;
     6e6:	10 92 3e 01 	sts	0x013E, r1
     6ea:	8f cf       	rjmp	.-226    	; 0x60a <__vector_16+0x88>

    update_bar(set_alarm[1]);

    //if clock is being set, encoders take in user input
    if(set_clock[1] | set_alarm[0]) {
        read_enc();
     6ec:	0e 94 c7 01 	call	0x38e	; 0x38e <read_enc>
    
        //modulate to a real time
        if(new_time[MIN] > 59) {
     6f0:	80 91 36 01 	lds	r24, 0x0136
     6f4:	8c 33       	cpi	r24, 0x3C	; 60
     6f6:	0c f0       	brlt	.+2      	; 0x6fa <__vector_16+0x178>
     6f8:	81 c0       	rjmp	.+258    	; 0x7fc <__vector_16+0x27a>
            new_time[MIN] = 0;
            new_time[HOUR] +=1;
        }
        else if(new_time[MIN] < 0) {
     6fa:	87 fd       	sbrc	r24, 7
     6fc:	92 c0       	rjmp	.+292    	; 0x822 <__vector_16+0x2a0>
     6fe:	80 91 35 01 	lds	r24, 0x0135
            new_time[MIN] = 59;
            new_time[HOUR] -=1;
        }

        if(new_time[HOUR] > 23) {
     702:	88 31       	cpi	r24, 0x18	; 24
     704:	0c f4       	brge	.+2      	; 0x708 <__vector_16+0x186>
     706:	84 c0       	rjmp	.+264    	; 0x810 <__vector_16+0x28e>
            new_time[HOUR] = 0;
     708:	10 92 35 01 	sts	0x0135, r1
        }
        if(new_time[HOUR] > 12) {
            pm = 1;
        }
        else {
            pm = 0;
     70c:	10 92 3e 01 	sts	0x013E, r1
     710:	ce cf       	rjmp	.-100    	; 0x6ae <__vector_16+0x12c>

  	PORTB = 0x01; //disable tristate buffer for pushbutton switches
    DDRA = 0xFF;

    if (set_alarm[1] == 0x07) {
        if(snooze) {
     712:	80 91 2c 01 	lds	r24, 0x012C
     716:	88 23       	and	r24, r24
     718:	09 f4       	brne	.+2      	; 0x71c <__vector_16+0x19a>
     71a:	bc cf       	rjmp	.-136    	; 0x694 <__vector_16+0x112>
            DDRC &= 0b11111100;
     71c:	84 b3       	in	r24, 0x14	; 20
     71e:	8c 7f       	andi	r24, 0xFC	; 252
     720:	84 bb       	out	0x14, r24	; 20
            snooze = 0;
     722:	10 92 2c 01 	sts	0x012C, r1
            set_alarm[1] &= 0x01;
     726:	80 91 31 01 	lds	r24, 0x0131
     72a:	81 70       	andi	r24, 0x01	; 1
     72c:	80 93 31 01 	sts	0x0131, r24
            alarm[HOUR] = time[HOUR]; 
     730:	80 91 38 01 	lds	r24, 0x0138
     734:	80 93 2d 01 	sts	0x012D, r24
            alarm[MIN] = time[MIN];
     738:	80 91 39 01 	lds	r24, 0x0139
     73c:	80 93 2e 01 	sts	0x012E, r24
            alarm[SEC] = time[SEC];
     740:	80 91 3a 01 	lds	r24, 0x013A
     744:	80 93 2f 01 	sts	0x012F, r24
                if (alarm[HOUR] > 24) {
                    alarm[HOUR] = 0;
                }
            
            #else
            alarm[SEC] += 10;
     748:	80 91 2f 01 	lds	r24, 0x012F
     74c:	86 5f       	subi	r24, 0xF6	; 246
     74e:	80 93 2f 01 	sts	0x012F, r24
            if (alarm[SEC] > 60) {
     752:	80 91 2f 01 	lds	r24, 0x012F
     756:	8d 33       	cpi	r24, 0x3D	; 61
     758:	08 f4       	brcc	.+2      	; 0x75c <__vector_16+0x1da>
     75a:	9c cf       	rjmp	.-200    	; 0x694 <__vector_16+0x112>
                alarm[SEC] -= 60;
     75c:	80 91 2f 01 	lds	r24, 0x012F
     760:	8c 53       	subi	r24, 0x3C	; 60
     762:	80 93 2f 01 	sts	0x012F, r24
                alarm[MIN] += 1;
     766:	80 91 2e 01 	lds	r24, 0x012E
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 2e 01 	sts	0x012E, r24
                if (alarm[MIN] > 60) {
     770:	80 91 2e 01 	lds	r24, 0x012E
     774:	8d 33       	cpi	r24, 0x3D	; 61
     776:	08 f4       	brcc	.+2      	; 0x77a <__vector_16+0x1f8>
     778:	8d cf       	rjmp	.-230    	; 0x694 <__vector_16+0x112>
                    alarm[MIN] -= 60;
     77a:	80 91 2e 01 	lds	r24, 0x012E
     77e:	8c 53       	subi	r24, 0x3C	; 60
     780:	80 93 2e 01 	sts	0x012E, r24
                    alarm[HOUR] += 1;
     784:	80 91 2d 01 	lds	r24, 0x012D
     788:	8f 5f       	subi	r24, 0xFF	; 255
     78a:	80 93 2d 01 	sts	0x012D, r24
                    if (alarm[HOUR] > 24) {
     78e:	80 91 2d 01 	lds	r24, 0x012D
     792:	89 31       	cpi	r24, 0x19	; 25
     794:	08 f4       	brcc	.+2      	; 0x798 <__vector_16+0x216>
     796:	7e cf       	rjmp	.-260    	; 0x694 <__vector_16+0x112>
                        alarm[HOUR] = 0;
     798:	10 92 2d 01 	sts	0x012D, r1
     79c:	7b cf       	rjmp	.-266    	; 0x694 <__vector_16+0x112>
    }
    
    if (count == 128) 
    {
        //1 Sec
        time[SEC] += 1;
     79e:	80 91 3a 01 	lds	r24, 0x013A
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	80 93 3a 01 	sts	0x013A, r24
        colon_toggle ^= 0x01;
     7a8:	90 91 10 01 	lds	r25, 0x0110
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	89 27       	eor	r24, r25
     7b0:	80 93 10 01 	sts	0x0110, r24
        count = 0;
     7b4:	10 92 3d 01 	sts	0x013D, r1
     7b8:	10 92 3c 01 	sts	0x013C, r1
        if (time[SEC] == 60)
     7bc:	80 91 3a 01 	lds	r24, 0x013A
     7c0:	8c 33       	cpi	r24, 0x3C	; 60
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <__vector_16+0x244>
     7c4:	1a cf       	rjmp	.-460    	; 0x5fa <__vector_16+0x78>
        {
            //1 Min
            time[SEC] = 0;
     7c6:	10 92 3a 01 	sts	0x013A, r1
            time[MIN] += 1;
     7ca:	80 91 39 01 	lds	r24, 0x0139
     7ce:	8f 5f       	subi	r24, 0xFF	; 255
     7d0:	80 93 39 01 	sts	0x0139, r24
            if (time[MIN] == 60) 
     7d4:	80 91 39 01 	lds	r24, 0x0139
     7d8:	8c 33       	cpi	r24, 0x3C	; 60
     7da:	09 f0       	breq	.+2      	; 0x7de <__vector_16+0x25c>
     7dc:	0e cf       	rjmp	.-484    	; 0x5fa <__vector_16+0x78>
            {
                //1 Hour
                time[MIN] = 0;
     7de:	10 92 39 01 	sts	0x0139, r1
                time[HOUR] += 1;
     7e2:	80 91 38 01 	lds	r24, 0x0138
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
     7e8:	80 93 38 01 	sts	0x0138, r24
                
                if (time[HOUR] == 24)
     7ec:	80 91 38 01 	lds	r24, 0x0138
     7f0:	88 31       	cpi	r24, 0x18	; 24
     7f2:	09 f0       	breq	.+2      	; 0x7f6 <__vector_16+0x274>
     7f4:	02 cf       	rjmp	.-508    	; 0x5fa <__vector_16+0x78>
                {
                    //1 Day
                    time[HOUR] = 0;
     7f6:	10 92 38 01 	sts	0x0138, r1
     7fa:	ff ce       	rjmp	.-514    	; 0x5fa <__vector_16+0x78>
    if(set_clock[1] | set_alarm[0]) {
        read_enc();
    
        //modulate to a real time
        if(new_time[MIN] > 59) {
            new_time[MIN] = 0;
     7fc:	10 92 36 01 	sts	0x0136, r1
            new_time[HOUR] +=1;
     800:	80 91 35 01 	lds	r24, 0x0135
     804:	8f 5f       	subi	r24, 0xFF	; 255
     806:	80 93 35 01 	sts	0x0135, r24
        else if(new_time[MIN] < 0) {
            new_time[MIN] = 59;
            new_time[HOUR] -=1;
        }

        if(new_time[HOUR] > 23) {
     80a:	88 31       	cpi	r24, 0x18	; 24
     80c:	0c f0       	brlt	.+2      	; 0x810 <__vector_16+0x28e>
     80e:	7c cf       	rjmp	.-264    	; 0x708 <__vector_16+0x186>
            new_time[HOUR] = 0;
        }
        else if(new_time[HOUR] < 0) {
     810:	87 fd       	sbrc	r24, 7
     812:	10 c0       	rjmp	.+32     	; 0x834 <__vector_16+0x2b2>
            new_time[HOUR] = 23;
        }
        if(new_time[HOUR] > 12) {
     814:	8d 30       	cpi	r24, 0x0D	; 13
     816:	0c f4       	brge	.+2      	; 0x81a <__vector_16+0x298>
     818:	79 cf       	rjmp	.-270    	; 0x70c <__vector_16+0x18a>
            pm = 1;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 3e 01 	sts	0x013E, r24
     820:	46 cf       	rjmp	.-372    	; 0x6ae <__vector_16+0x12c>
        if(new_time[MIN] > 59) {
            new_time[MIN] = 0;
            new_time[HOUR] +=1;
        }
        else if(new_time[MIN] < 0) {
            new_time[MIN] = 59;
     822:	8b e3       	ldi	r24, 0x3B	; 59
     824:	80 93 36 01 	sts	0x0136, r24
            new_time[HOUR] -=1;
     828:	80 91 35 01 	lds	r24, 0x0135
     82c:	81 50       	subi	r24, 0x01	; 1
     82e:	80 93 35 01 	sts	0x0135, r24
     832:	67 cf       	rjmp	.-306    	; 0x702 <__vector_16+0x180>

        if(new_time[HOUR] > 23) {
            new_time[HOUR] = 0;
        }
        else if(new_time[HOUR] < 0) {
            new_time[HOUR] = 23;
     834:	87 e1       	ldi	r24, 0x17	; 23
     836:	80 93 35 01 	sts	0x0135, r24
     83a:	ef cf       	rjmp	.-34     	; 0x81a <__vector_16+0x298>

0000083c <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	81 11       	cpse	r24, r1
     840:	01 c0       	rjmp	.+2      	; 0x844 <send_lcd+0x8>
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     846:	77 9b       	sbis	0x0e, 7	; 14
     848:	fe cf       	rjmp	.-4      	; 0x846 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     84a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     84c:	77 9b       	sbis	0x0e, 7	; 14
     84e:	fe cf       	rjmp	.-4      	; 0x84c <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     850:	80 91 62 00 	lds	r24, 0x0062
     854:	88 60       	ori	r24, 0x08	; 8
     856:	80 93 62 00 	sts	0x0062, r24
     85a:	80 91 62 00 	lds	r24, 0x0062
     85e:	87 7f       	andi	r24, 0xF7	; 247
     860:	80 93 62 00 	sts	0x0062, r24
     864:	08 95       	ret

00000866 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
     866:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     868:	c0 91 50 01 	lds	r28, 0x0150
     86c:	8c 0f       	add	r24, r28
     86e:	91 1d       	adc	r25, r1
     870:	fc 01       	movw	r30, r24
     872:	60 81       	ld	r22, Z
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
 i++;   //increment to next character
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	8c 0f       	add	r24, r28
     87e:	80 93 50 01 	sts	0x0150, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     882:	80 31       	cpi	r24, 0x10	; 16
     884:	a1 f0       	breq	.+40     	; 0x8ae <refresh_lcd+0x48>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     886:	80 32       	cpi	r24, 0x20	; 32
     888:	11 f0       	breq	.+4      	; 0x88e <refresh_lcd+0x28>
}//refresh_lcd
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88e:	e5 ed       	ldi	r30, 0xD5	; 213
     890:	ea 95       	dec	r30
     892:	f1 f7       	brne	.-4      	; 0x890 <refresh_lcd+0x2a>
     894:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     896:	60 e8       	ldi	r22, 0x80	; 128
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     89e:	f5 ed       	ldi	r31, 0xD5	; 213
     8a0:	fa 95       	dec	r31
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <refresh_lcd+0x3a>
     8a4:	00 00       	nop
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     8a6:	10 92 50 01 	sts	0x0150, r1
}//refresh_lcd
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret
     8ae:	f5 ed       	ldi	r31, 0xD5	; 213
     8b0:	fa 95       	dec	r31
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <refresh_lcd+0x4a>
     8b4:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     8b6:	60 ec       	ldi	r22, 0xC0	; 192
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     8be:	85 ed       	ldi	r24, 0xD5	; 213
     8c0:	8a 95       	dec	r24
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <refresh_lcd+0x5a>
     8c4:	00 00       	nop
     8c6:	80 91 50 01 	lds	r24, 0x0150
     8ca:	dd cf       	rjmp	.-70     	; 0x886 <refresh_lcd+0x20>

000008cc <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	1f 92       	push	r1
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     8e0:	66 0f       	add	r22, r22
     8e2:	66 0f       	add	r22, r22
     8e4:	66 0f       	add	r22, r22
     8e6:	60 5c       	subi	r22, 0xC0	; 192
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	99 83       	std	Y+1, r25	; 0x01
     8ec:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     8f0:	85 ed       	ldi	r24, 0xD5	; 213
     8f2:	8a 95       	dec	r24
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <set_custom_character+0x26>
     8f6:	00 00       	nop
     8f8:	e1 2e       	mov	r14, r17
     8fa:	99 81       	ldd	r25, Y+1	; 0x01
     8fc:	f9 2e       	mov	r15, r25
     8fe:	87 01       	movw	r16, r14
     900:	08 5f       	subi	r16, 0xF8	; 248
     902:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     904:	f7 01       	movw	r30, r14
     906:	61 91       	ld	r22, Z+
     908:	7f 01       	movw	r14, r30
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     910:	f5 ed       	ldi	r31, 0xD5	; 213
     912:	fa 95       	dec	r31
     914:	f1 f7       	brne	.-4      	; 0x912 <set_custom_character+0x46>
     916:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     918:	e0 16       	cp	r14, r16
     91a:	f1 06       	cpc	r15, r17
     91c:	99 f7       	brne	.-26     	; 0x904 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     91e:	0f 90       	pop	r0
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	08 95       	ret

0000092e <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     92e:	90 e4       	ldi	r25, 0x40	; 64
     930:	89 9f       	mul	r24, r25
     932:	60 0d       	add	r22, r0
     934:	11 24       	eor	r1, r1
     936:	60 5c       	subi	r22, 0xC0	; 192
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0c 94 1e 04 	jmp	0x83c	; 0x83c <send_lcd>

0000093e <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
     93e:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     940:	88 23       	and	r24, r24
     942:	b9 f1       	breq	.+110    	; 0x9b2 <uint2lcd+0x74>
     944:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     946:	84 36       	cpi	r24, 0x64	; 100
     948:	98 f4       	brcc	.+38     	; 0x970 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     94a:	8a 30       	cpi	r24, 0x0A	; 10
     94c:	d8 f4       	brcc	.+54     	; 0x984 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     94e:	8d ec       	ldi	r24, 0xCD	; 205
     950:	c8 9f       	mul	r28, r24
     952:	81 2d       	mov	r24, r1
     954:	11 24       	eor	r1, r1
     956:	86 95       	lsr	r24
     958:	86 95       	lsr	r24
     95a:	86 95       	lsr	r24
     95c:	6c 2f       	mov	r22, r28
     95e:	2a e0       	ldi	r18, 0x0A	; 10
     960:	82 9f       	mul	r24, r18
     962:	60 19       	sub	r22, r0
     964:	11 24       	eor	r1, r1
     966:	60 5d       	subi	r22, 0xD0	; 208
     968:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     96a:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     96c:	0c 94 1e 04 	jmp	0x83c	; 0x83c <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     970:	69 e2       	ldi	r22, 0x29	; 41
     972:	86 9f       	mul	r24, r22
     974:	61 2d       	mov	r22, r1
     976:	11 24       	eor	r1, r1
     978:	62 95       	swap	r22
     97a:	6f 70       	andi	r22, 0x0F	; 15
     97c:	60 5d       	subi	r22, 0xD0	; 208
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     984:	89 e2       	ldi	r24, 0x29	; 41
     986:	c8 9f       	mul	r28, r24
     988:	81 2d       	mov	r24, r1
     98a:	11 24       	eor	r1, r1
     98c:	82 95       	swap	r24
     98e:	8f 70       	andi	r24, 0x0F	; 15
     990:	9c 2f       	mov	r25, r28
     992:	24 e6       	ldi	r18, 0x64	; 100
     994:	82 9f       	mul	r24, r18
     996:	90 19       	sub	r25, r0
     998:	11 24       	eor	r1, r1
     99a:	6d ec       	ldi	r22, 0xCD	; 205
     99c:	96 9f       	mul	r25, r22
     99e:	61 2d       	mov	r22, r1
     9a0:	11 24       	eor	r1, r1
     9a2:	66 95       	lsr	r22
     9a4:	66 95       	lsr	r22
     9a6:	66 95       	lsr	r22
     9a8:	60 5d       	subi	r22, 0xD0	; 208
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     9b0:	ce cf       	rjmp	.-100    	; 0x94e <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     9b2:	60 e3       	ldi	r22, 0x30	; 48
     9b4:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
     9b6:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     9b8:	0c 94 1e 04 	jmp	0x83c	; 0x83c <send_lcd>

000009bc <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
     9bc:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     9be:	87 fd       	sbrc	r24, 7
     9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
     9c2:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
     9c4:	0c 94 9f 04 	jmp	0x93e	; 0x93e <uint2lcd>
     9c8:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     9ca:	6d e2       	ldi	r22, 0x2D	; 45
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     9d2:	85 ed       	ldi	r24, 0xD5	; 213
     9d4:	8a 95       	dec	r24
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <int2lcd+0x18>
     9d8:	00 00       	nop
     9da:	8c 2f       	mov	r24, r28
     9dc:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
     9de:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     9e0:	0c 94 9f 04 	jmp	0x93e	; 0x93e <uint2lcd>

000009e4 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
     9e4:	6e e0       	ldi	r22, 0x0E	; 14
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0c 94 1e 04 	jmp	0x83c	; 0x83c <send_lcd>

000009ec <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
     9ec:	6c e0       	ldi	r22, 0x0C	; 12
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0c 94 1e 04 	jmp	0x83c	; 0x83c <send_lcd>

000009f4 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
     9f4:	6e e1       	ldi	r22, 0x1E	; 30
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0c 94 1e 04 	jmp	0x83c	; 0x83c <send_lcd>

000009fc <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
     9fc:	68 e1       	ldi	r22, 0x18	; 24
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0c 94 1e 04 	jmp	0x83c	; 0x83c <send_lcd>

00000a04 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a04:	e2 e6       	ldi	r30, 0x62	; 98
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	88 60       	ori	r24, 0x08	; 8
     a0c:	80 83       	st	Z, r24
     a0e:	80 81       	ld	r24, Z
     a10:	87 7f       	andi	r24, 0xF7	; 247
     a12:	80 83       	st	Z, r24
     a14:	08 95       	ret

00000a16 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     a1e:	8f e1       	ldi	r24, 0x1F	; 31
     a20:	9c e1       	ldi	r25, 0x1C	; 28
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <clear_display+0xc>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <clear_display+0x12>
     a28:	00 00       	nop
     a2a:	08 95       	ret

00000a2c <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
     a2c:	62 e0       	ldi	r22, 0x02	; 2
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     a34:	8f e6       	ldi	r24, 0x6F	; 111
     a36:	97 e1       	ldi	r25, 0x17	; 23
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <cursor_home+0xc>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <cursor_home+0x12>
     a3e:	00 00       	nop
     a40:	08 95       	ret

00000a42 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     a42:	60 ec       	ldi	r22, 0xC0	; 192
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     a4a:	85 ed       	ldi	r24, 0xD5	; 213
     a4c:	8a 95       	dec	r24
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <line2_col1+0xa>
     a50:	00 00       	nop
     a52:	08 95       	ret

00000a54 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     a54:	60 e8       	ldi	r22, 0x80	; 128
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     a5c:	85 ed       	ldi	r24, 0xD5	; 213
     a5e:	8a 95       	dec	r24
     a60:	f1 f7       	brne	.-4      	; 0xa5e <line1_col1+0xa>
     a62:	00 00       	nop
     a64:	08 95       	ret

00000a66 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     a66:	cf 93       	push	r28
     a68:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
     a6a:	60 e2       	ldi	r22, 0x20	; 32
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     a72:	85 ed       	ldi	r24, 0xD5	; 213
     a74:	8a 95       	dec	r24
     a76:	f1 f7       	brne	.-4      	; 0xa74 <fill_spaces+0xe>
     a78:	00 00       	nop
     a7a:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     a7c:	b1 f7       	brne	.-20     	; 0xa6a <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
     a82:	68 2f       	mov	r22, r24
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	0c 94 1e 04 	jmp	0x83c	; 0x83c <send_lcd>

00000a8a <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	c0 e0       	ldi	r28, 0x00	; 0
     a98:	f8 01       	movw	r30, r16
     a9a:	e4 0f       	add	r30, r20
     a9c:	f5 1f       	adc	r31, r21
     a9e:	60 81       	ld	r22, Z
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     aa6:	85 ed       	ldi	r24, 0xD5	; 213
     aa8:	8a 95       	dec	r24
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <string2lcd+0x1e>
     aac:	00 00       	nop
     aae:	cf 5f       	subi	r28, 0xFF	; 255
     ab0:	4c 2f       	mov	r20, r28
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	f8 01       	movw	r30, r16
     ab6:	01 90       	ld	r0, Z+
     ab8:	00 20       	and	r0, r0
     aba:	e9 f7       	brne	.-6      	; 0xab6 <string2lcd+0x2c>
     abc:	9f 01       	movw	r18, r30
     abe:	20 1b       	sub	r18, r16
     ac0:	31 0b       	sbc	r19, r17
     ac2:	22 50       	subi	r18, 0x02	; 2
     ac4:	31 09       	sbc	r19, r1
     ac6:	24 17       	cp	r18, r20
     ac8:	35 07       	cpc	r19, r21
     aca:	30 f7       	brcc	.-52     	; 0xa98 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	08 95       	ret

00000ad4 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	99 ef       	ldi	r25, 0xF9	; 249
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <lcd_init+0x4>
     adc:	00 c0       	rjmp	.+0      	; 0xade <lcd_init+0xa>
     ade:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF|=0x08;          //port F bit 3 is enable for LCD in SPI mode
     ae0:	e1 e6       	ldi	r30, 0x61	; 97
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	88 60       	ori	r24, 0x08	; 8
     ae8:	80 83       	st	Z, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
     aea:	60 e3       	ldi	r22, 0x30	; 48
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     af2:	8f e5       	ldi	r24, 0x5F	; 95
     af4:	9d e6       	ldi	r25, 0x6D	; 109
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <lcd_init+0x22>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <lcd_init+0x28>
     afc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     afe:	60 e3       	ldi	r22, 0x30	; 48
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     b06:	8f e5       	ldi	r24, 0x5F	; 95
     b08:	9d e6       	ldi	r25, 0x6D	; 109
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <lcd_init+0x36>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <lcd_init+0x3c>
     b10:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     b12:	60 e3       	ldi	r22, 0x30	; 48
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     b1a:	8f e5       	ldi	r24, 0x5F	; 95
     b1c:	9d e6       	ldi	r25, 0x6D	; 109
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <lcd_init+0x4a>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <lcd_init+0x50>
     b24:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
     b26:	68 e3       	ldi	r22, 0x38	; 56
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     b2e:	8f e1       	ldi	r24, 0x1F	; 31
     b30:	9e e4       	ldi	r25, 0x4E	; 78
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <lcd_init+0x5e>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <lcd_init+0x64>
     b38:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
     b3a:	68 e0       	ldi	r22, 0x08	; 8
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     b42:	8f e1       	ldi	r24, 0x1F	; 31
     b44:	9e e4       	ldi	r25, 0x4E	; 78
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <lcd_init+0x72>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <lcd_init+0x78>
     b4c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     b56:	8f e1       	ldi	r24, 0x1F	; 31
     b58:	9e e4       	ldi	r25, 0x4E	; 78
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <lcd_init+0x86>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <lcd_init+0x8c>
     b60:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
     b62:	66 e0       	ldi	r22, 0x06	; 6
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     b6a:	8f e1       	ldi	r24, 0x1F	; 31
     b6c:	9e e4       	ldi	r25, 0x4E	; 78
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <lcd_init+0x9a>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <lcd_init+0xa0>
     b74:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
     b76:	6c e0       	ldi	r22, 0x0C	; 12
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     b7e:	8f e1       	ldi	r24, 0x1F	; 31
     b80:	9e e4       	ldi	r25, 0x4E	; 78
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <lcd_init+0xae>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <lcd_init+0xb4>
     b88:	00 00       	nop
     b8a:	08 95       	ret

00000b8c <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     b8c:	8f 92       	push	r8
     b8e:	9f 92       	push	r9
     b90:	af 92       	push	r10
     b92:	bf 92       	push	r11
     b94:	cf 92       	push	r12
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	69 97       	sbiw	r28, 0x19	; 25
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	f4 2e       	mov	r15, r20
     bb6:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     bb8:	00 23       	and	r16, r16
     bba:	59 f0       	breq	.+22     	; 0xbd2 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
     bbc:	4b 01       	movw	r8, r22
     bbe:	5c 01       	movw	r10, r24
     bc0:	88 24       	eor	r8, r8
     bc2:	b7 fc       	sbrc	r11, 7
     bc4:	83 94       	inc	r8
     bc6:	99 24       	eor	r9, r9
     bc8:	aa 24       	eor	r10, r10
     bca:	bb 24       	eor	r11, r11
     bcc:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
     bce:	97 fd       	sbrc	r25, 7
     bd0:	8f c0       	rjmp	.+286    	; 0xcf0 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     bd2:	11 23       	and	r17, r17
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <lcd_int32+0x4c>
     bd6:	84 c0       	rjmp	.+264    	; 0xce0 <lcd_int32+0x154>
     bd8:	9e 01       	movw	r18, r28
     bda:	2f 5f       	subi	r18, 0xFF	; 255
     bdc:	3f 4f       	sbci	r19, 0xFF	; 255
     bde:	69 01       	movw	r12, r18
     be0:	59 01       	movw	r10, r18
     be2:	88 24       	eor	r8, r8
     be4:	8a 94       	dec	r8
     be6:	81 0e       	add	r8, r17
     be8:	91 2c       	mov	r9, r1
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	83 1a       	sub	r8, r19
     bee:	93 0a       	sbc	r9, r19
     bf0:	8c 0c       	add	r8, r12
     bf2:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     bf4:	2a e0       	ldi	r18, 0x0A	; 10
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	0e 94 27 08 	call	0x104e	; 0x104e <__divmodsi4>
     c00:	e6 2f       	mov	r30, r22
     c02:	2a 8b       	std	Y+18, r18	; 0x12
     c04:	3b 8b       	std	Y+19, r19	; 0x13
     c06:	4c 8b       	std	Y+20, r20	; 0x14
     c08:	5d 8b       	std	Y+21, r21	; 0x15
     c0a:	6a 89       	ldd	r22, Y+18	; 0x12
     c0c:	7b 89       	ldd	r23, Y+19	; 0x13
     c0e:	8c 89       	ldd	r24, Y+20	; 0x14
     c10:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     c12:	20 e3       	ldi	r18, 0x30	; 48
     c14:	2e 0f       	add	r18, r30
     c16:	f5 01       	movw	r30, r10
     c18:	21 93       	st	Z+, r18
     c1a:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     c1c:	e8 15       	cp	r30, r8
     c1e:	f9 05       	cpc	r31, r9
     c20:	49 f7       	brne	.-46     	; 0xbf4 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     c22:	bb 24       	eor	r11, r11
     c24:	b3 94       	inc	r11
     c26:	b1 0e       	add	r11, r17
     c28:	f6 01       	movw	r30, r12
     c2a:	e1 0f       	add	r30, r17
     c2c:	f1 1d       	adc	r31, r1
     c2e:	2e e2       	ldi	r18, 0x2E	; 46
     c30:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     c32:	2a e0       	ldi	r18, 0x0A	; 10
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	0e 94 27 08 	call	0x104e	; 0x104e <__divmodsi4>
     c3e:	e6 2f       	mov	r30, r22
     c40:	2a 8b       	std	Y+18, r18	; 0x12
     c42:	3b 8b       	std	Y+19, r19	; 0x13
     c44:	4c 8b       	std	Y+20, r20	; 0x14
     c46:	5d 8b       	std	Y+21, r21	; 0x15
     c48:	6e 8b       	std	Y+22, r22	; 0x16
     c4a:	7f 8b       	std	Y+23, r23	; 0x17
     c4c:	88 8f       	std	Y+24, r24	; 0x18
     c4e:	99 8f       	std	Y+25, r25	; 0x19
     c50:	6a 89       	ldd	r22, Y+18	; 0x12
     c52:	7b 89       	ldd	r23, Y+19	; 0x13
     c54:	8c 89       	ldd	r24, Y+20	; 0x14
     c56:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     c58:	11 e0       	ldi	r17, 0x01	; 1
     c5a:	1b 0d       	add	r17, r11
     c5c:	d6 01       	movw	r26, r12
     c5e:	ab 0d       	add	r26, r11
     c60:	b1 1d       	adc	r27, r1
     c62:	e0 5d       	subi	r30, 0xD0	; 208
     c64:	ec 93       	st	X, r30
     c66:	b1 2e       	mov	r11, r17
        }while(qr.quot);
     c68:	61 15       	cp	r22, r1
     c6a:	71 05       	cpc	r23, r1
     c6c:	81 05       	cpc	r24, r1
     c6e:	91 05       	cpc	r25, r1
     c70:	01 f7       	brne	.-64     	; 0xc32 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
     c72:	ff 20       	and	r15, r15
     c74:	61 f0       	breq	.+24     	; 0xc8e <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     c76:	e1 10       	cpse	r14, r1
     c78:	39 c0       	rjmp	.+114    	; 0xcec <lcd_int32+0x160>
     c7a:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     c7c:	1f 15       	cp	r17, r15
     c7e:	38 f4       	brcc	.+14     	; 0xc8e <lcd_int32+0x102>
     c80:	f6 01       	movw	r30, r12
     c82:	e1 0f       	add	r30, r17
     c84:	f1 1d       	adc	r31, r1
     c86:	80 83       	st	Z, r24
     c88:	1f 5f       	subi	r17, 0xFF	; 255
     c8a:	1f 11       	cpse	r17, r15
     c8c:	f9 cf       	rjmp	.-14     	; 0xc80 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     c8e:	00 23       	and	r16, r16
     c90:	31 f0       	breq	.+12     	; 0xc9e <lcd_int32+0x112>
     c92:	f6 01       	movw	r30, r12
     c94:	e1 0f       	add	r30, r17
     c96:	f1 1d       	adc	r31, r1
     c98:	8d e2       	ldi	r24, 0x2D	; 45
     c9a:	80 83       	st	Z, r24
     c9c:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     c9e:	11 50       	subi	r17, 0x01	; 1
     ca0:	f6 01       	movw	r30, r12
     ca2:	e1 0f       	add	r30, r17
     ca4:	f1 1d       	adc	r31, r1
     ca6:	60 81       	ld	r22, Z
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cae:	35 ed       	ldi	r19, 0xD5	; 213
     cb0:	3a 95       	dec	r19
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <lcd_int32+0x124>
     cb4:	00 00       	nop
     cb6:	11 11       	cpse	r17, r1
     cb8:	f2 cf       	rjmp	.-28     	; 0xc9e <lcd_int32+0x112>

}
     cba:	69 96       	adiw	r28, 0x19	; 25
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	cf 90       	pop	r12
     cd6:	bf 90       	pop	r11
     cd8:	af 90       	pop	r10
     cda:	9f 90       	pop	r9
     cdc:	8f 90       	pop	r8
     cde:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     ce0:	b1 2c       	mov	r11, r1
     ce2:	9e 01       	movw	r18, r28
     ce4:	2f 5f       	subi	r18, 0xFF	; 255
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
     ce8:	69 01       	movw	r12, r18
     cea:	a3 cf       	rjmp	.-186    	; 0xc32 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     cec:	80 e3       	ldi	r24, 0x30	; 48
     cee:	c6 cf       	rjmp	.-116    	; 0xc7c <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     cf0:	90 95       	com	r25
     cf2:	80 95       	com	r24
     cf4:	70 95       	com	r23
     cf6:	61 95       	neg	r22
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	8f 4f       	sbci	r24, 0xFF	; 255
     cfc:	9f 4f       	sbci	r25, 0xFF	; 255
     cfe:	69 cf       	rjmp	.-302    	; 0xbd2 <lcd_int32+0x46>

00000d00 <lcd_int16>:
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bSigned,
                  uint8_t bZeroFill)
{
     d00:	5f 92       	push	r5
     d02:	6f 92       	push	r6
     d04:	7f 92       	push	r7
     d06:	8f 92       	push	r8
     d08:	9f 92       	push	r9
     d0a:	af 92       	push	r10
     d0c:	bf 92       	push	r11
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	61 97       	sbiw	r28, 0x11	; 17
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	66 2e       	mov	r6, r22
     d30:	14 2f       	mov	r17, r20
//        uint8_t bSigned;   Now an argument for signed or not

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
     d32:	59 2e       	mov	r5, r25
     d34:	55 1c       	adc	r5, r5
     d36:	55 24       	eor	r5, r5
     d38:	55 1c       	adc	r5, r5
     d3a:	75 2c       	mov	r7, r5
     d3c:	a5 2c       	mov	r10, r5
     d3e:	b1 2c       	mov	r11, r1
     d40:	22 27       	eor	r18, r18
     d42:	33 27       	eor	r19, r19
     d44:	2a 19       	sub	r18, r10
     d46:	3b 09       	sbc	r19, r11
     d48:	82 27       	eor	r24, r18
     d4a:	93 27       	eor	r25, r19
     d4c:	9c 01       	movw	r18, r24
     d4e:	2a 0d       	add	r18, r10
     d50:	3b 1d       	adc	r19, r11
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
     d52:	44 23       	and	r20, r20
     d54:	09 f4       	brne	.+2      	; 0xd58 <lcd_int16+0x58>
     d56:	90 c0       	rjmp	.+288    	; 0xe78 <lcd_int16+0x178>
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	7c 01       	movw	r14, r24
     d5e:	6c 01       	movw	r12, r24
     d60:	88 24       	eor	r8, r8
     d62:	8a 94       	dec	r8
     d64:	84 0e       	add	r8, r20
     d66:	91 2c       	mov	r9, r1
     d68:	9f ef       	ldi	r25, 0xFF	; 255
     d6a:	89 1a       	sub	r8, r25
     d6c:	99 0a       	sbc	r9, r25
     d6e:	8e 0c       	add	r8, r14
     d70:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
     d72:	6a e0       	ldi	r22, 0x0A	; 10
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	c9 01       	movw	r24, r18
     d78:	0e 94 13 08 	call	0x1026	; 0x1026 <__divmodhi4>
     d7c:	46 2f       	mov	r20, r22
     d7e:	24 2f       	mov	r18, r20
     d80:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
     d82:	80 5d       	subi	r24, 0xD0	; 208
     d84:	f6 01       	movw	r30, r12
     d86:	81 93       	st	Z+, r24
     d88:	6f 01       	movw	r12, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
     d8a:	e8 15       	cp	r30, r8
     d8c:	f9 05       	cpc	r31, r9
     d8e:	89 f7       	brne	.-30     	; 0xd72 <lcd_int16+0x72>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     d90:	dd 24       	eor	r13, r13
     d92:	d3 94       	inc	r13
     d94:	d1 0e       	add	r13, r17
     d96:	f7 01       	movw	r30, r14
     d98:	e1 0f       	add	r30, r17
     d9a:	f1 1d       	adc	r31, r1
     d9c:	8e e2       	ldi	r24, 0x2E	; 46
     d9e:	80 83       	st	Z, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
     da0:	6a e0       	ldi	r22, 0x0A	; 10
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	c9 01       	movw	r24, r18
     da6:	0e 94 13 08 	call	0x1026	; 0x1026 <__divmodhi4>
     daa:	46 2f       	mov	r20, r22
     dac:	24 2f       	mov	r18, r20
     dae:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
     db0:	11 e0       	ldi	r17, 0x01	; 1
     db2:	1d 0d       	add	r17, r13
     db4:	f7 01       	movw	r30, r14
     db6:	ed 0d       	add	r30, r13
     db8:	f1 1d       	adc	r31, r1
     dba:	80 5d       	subi	r24, 0xD0	; 208
     dbc:	80 83       	st	Z, r24
     dbe:	d1 2e       	mov	r13, r17
        }
        while(qr.quot);
     dc0:	21 15       	cp	r18, r1
     dc2:	31 05       	cpc	r19, r1
     dc4:	69 f7       	brne	.-38     	; 0xda0 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
     dc6:	01 11       	cpse	r16, r1
     dc8:	15 c0       	rjmp	.+42     	; 0xdf4 <lcd_int16+0xf4>
     dca:	55 20       	and	r5, r5
     dcc:	39 f0       	breq	.+14     	; 0xddc <lcd_int16+0xdc>
        {
                sline[i++] = '-';
     dce:	11 e0       	ldi	r17, 0x01	; 1
     dd0:	1d 0d       	add	r17, r13
     dd2:	f7 01       	movw	r30, r14
     dd4:	ed 0d       	add	r30, r13
     dd6:	f1 1d       	adc	r31, r1
     dd8:	8d e2       	ldi	r24, 0x2D	; 45
     dda:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     ddc:	66 20       	and	r6, r6
     dde:	41 f1       	breq	.+80     	; 0xe30 <lcd_int16+0x130>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     de0:	81 2f       	mov	r24, r17
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	26 2d       	mov	r18, r6
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	82 17       	cp	r24, r18
     dea:	93 07       	cpc	r25, r19
     dec:	0c f5       	brge	.+66     	; 0xe30 <lcd_int16+0x130>
     dee:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     df0:	40 e2       	ldi	r20, 0x20	; 32
     df2:	0c c0       	rjmp	.+24     	; 0xe0c <lcd_int16+0x10c>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     df4:	66 20       	and	r6, r6
     df6:	a1 f0       	breq	.+40     	; 0xe20 <lcd_int16+0x120>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     df8:	81 2f       	mov	r24, r17
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	26 2d       	mov	r18, r6
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	2a 19       	sub	r18, r10
     e02:	3b 09       	sbc	r19, r11
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	5c f4       	brge	.+22     	; 0xe20 <lcd_int16+0x120>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     e0a:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     e0c:	1f 5f       	subi	r17, 0xFF	; 255
     e0e:	f7 01       	movw	r30, r14
     e10:	e8 0f       	add	r30, r24
     e12:	f9 1f       	adc	r31, r25
     e14:	40 83       	st	Z, r20
     e16:	81 2f       	mov	r24, r17
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	82 17       	cp	r24, r18
     e1c:	93 07       	cpc	r25, r19
     e1e:	b4 f3       	brlt	.-20     	; 0xe0c <lcd_int16+0x10c>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
     e20:	77 20       	and	r7, r7
     e22:	31 f0       	breq	.+12     	; 0xe30 <lcd_int16+0x130>
     e24:	f7 01       	movw	r30, r14
     e26:	e1 0f       	add	r30, r17
     e28:	f1 1d       	adc	r31, r1
     e2a:	8d e2       	ldi	r24, 0x2D	; 45
     e2c:	80 83       	st	Z, r24
     e2e:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     e30:	11 50       	subi	r17, 0x01	; 1
     e32:	f7 01       	movw	r30, r14
     e34:	e1 0f       	add	r30, r17
     e36:	f1 1d       	adc	r31, r1
     e38:	60 81       	ld	r22, Z
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	0e 94 1e 04 	call	0x83c	; 0x83c <send_lcd>
     e40:	95 ed       	ldi	r25, 0xD5	; 213
     e42:	9a 95       	dec	r25
     e44:	f1 f7       	brne	.-4      	; 0xe42 <lcd_int16+0x142>
     e46:	00 00       	nop
     e48:	11 11       	cpse	r17, r1
     e4a:	f2 cf       	rjmp	.-28     	; 0xe30 <lcd_int16+0x130>
}
     e4c:	61 96       	adiw	r28, 0x11	; 17
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	cf 90       	pop	r12
     e68:	bf 90       	pop	r11
     e6a:	af 90       	pop	r10
     e6c:	9f 90       	pop	r9
     e6e:	8f 90       	pop	r8
     e70:	7f 90       	pop	r7
     e72:	6f 90       	pop	r6
     e74:	5f 90       	pop	r5
     e76:	08 95       	ret
                  uint8_t decpos, 
                  uint8_t bSigned,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
     e78:	d1 2c       	mov	r13, r1
     e7a:	ce 01       	movw	r24, r28
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	7c 01       	movw	r14, r24
     e80:	8f cf       	rjmp	.-226    	; 0xda0 <lcd_int16+0xa0>

00000e82 <resetClock>:
#include "timeSpec.h"
#include <stdio.h>

void resetClock(struct timeSpec* ts)
{
     e82:	fc 01       	movw	r30, r24
	ts->seconds = 0;
     e84:	10 82       	st	Z, r1
	ts->minutes = 0;
     e86:	11 82       	std	Z+1, r1	; 0x01
	ts->hours = 0;
     e88:	12 82       	std	Z+2, r1	; 0x02
     e8a:	08 95       	ret

00000e8c <toString24>:
}


void toString24(struct timeSpec* ts, char* buffer)
{
     e8c:	fc 01       	movw	r30, r24
	//sprintf(buffer, "%02d:%02d:%02d", ts->hours, ts->minutes, ts->seconds);
	sprintf(buffer, "%02d:%02d:%02d", ts->hours, ts->minutes, ts->seconds);
     e8e:	80 81       	ld	r24, Z
     e90:	1f 92       	push	r1
     e92:	8f 93       	push	r24
     e94:	81 81       	ldd	r24, Z+1	; 0x01
     e96:	1f 92       	push	r1
     e98:	8f 93       	push	r24
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	1f 92       	push	r1
     e9e:	8f 93       	push	r24
     ea0:	8d e1       	ldi	r24, 0x1D	; 29
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	7f 93       	push	r23
     eaa:	6f 93       	push	r22
     eac:	0e 94 29 0a 	call	0x1452	; 0x1452 <sprintf>
     eb0:	8d b7       	in	r24, 0x3d	; 61
     eb2:	9e b7       	in	r25, 0x3e	; 62
     eb4:	0a 96       	adiw	r24, 0x0a	; 10
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	9e bf       	out	0x3e, r25	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	8d bf       	out	0x3d, r24	; 61
     ec0:	08 95       	ret

00000ec2 <addSecond>:
     ec2:	fc 01       	movw	r30, r24
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
     ec8:	80 83       	st	Z, r24
     eca:	8c 33       	cpi	r24, 0x3C	; 60
     ecc:	90 f4       	brcc	.+36     	; 0xef2 <addSecond+0x30>
     ece:	81 81       	ldd	r24, Z+1	; 0x01
     ed0:	8c 33       	cpi	r24, 0x3C	; 60
     ed2:	a8 f0       	brcs	.+42     	; 0xefe <addSecond+0x3c>
     ed4:	11 82       	std	Z+1, r1	; 0x01
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	9b ea       	ldi	r25, 0xAB	; 171
     edc:	89 9f       	mul	r24, r25
     ede:	91 2d       	mov	r25, r1
     ee0:	11 24       	eor	r1, r1
     ee2:	92 95       	swap	r25
     ee4:	9f 70       	andi	r25, 0x0F	; 15
     ee6:	28 e1       	ldi	r18, 0x18	; 24
     ee8:	92 9f       	mul	r25, r18
     eea:	80 19       	sub	r24, r0
     eec:	11 24       	eor	r1, r1
     eee:	82 83       	std	Z+2, r24	; 0x02
     ef0:	08 95       	ret
     ef2:	10 82       	st	Z, r1
     ef4:	81 81       	ldd	r24, Z+1	; 0x01
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	81 83       	std	Z+1, r24	; 0x01
     efa:	8c 33       	cpi	r24, 0x3C	; 60
     efc:	58 f7       	brcc	.-42     	; 0xed4 <addSecond+0x12>
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	ec cf       	rjmp	.-40     	; 0xeda <addSecond+0x18>

00000f02 <main>:
//******************************************************************************
//                            spi_init
// Initializes the SPI port, nothing else.
//
void spi_init(void) {
    DDRF    |= 0x08; //enable LCD?
     f02:	80 91 61 00 	lds	r24, 0x0061
     f06:	88 60       	ori	r24, 0x08	; 8
     f08:	80 93 61 00 	sts	0x0061, r24
    PORTF   &= 0xF7;
     f0c:	80 91 62 00 	lds	r24, 0x0062
     f10:	87 7f       	andi	r24, 0xF7	; 247
     f12:	80 93 62 00 	sts	0x0062, r24

    DDRB = 0x07;                //Turn on SS, MOSI, SCLK (SS is output)
     f16:	87 e0       	ldi	r24, 0x07	; 7
     f18:	87 bb       	out	0x17, r24	; 23
    PORTB = (1<<PB1);
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	88 bb       	out	0x18, r24	; 24

    SPCR = (1<<SPE)|(1<<MSTR);  //SPI enabled, master, low polarity, MSB 1st
     f1e:	80 e5       	ldi	r24, 0x50	; 80
     f20:	8d b9       	out	0x0d, r24	; 13
    SPSR = (1<<SPI2X);          //run at i/o clock/2
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	8e b9       	out	0x0e, r24	; 14
    spi_init(); //initialize SPI
    
    //DDRF    |= 0x08; //enable LCD?
    //PORTF   &= 0xF7;

    lcd_init(); //initialize LCD
     f26:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_init>
    clear_display();
     f2a:	0e 94 0b 05 	call	0xa16	; 0xa16 <clear_display>

    TIMSK |= (1<<TOIE0) | (1<<OCIE1A);            //enable interrupts
     f2e:	87 b7       	in	r24, 0x37	; 55
     f30:	81 61       	ori	r24, 0x11	; 17
     f32:	87 bf       	out	0x37, r24	; 55
    
    //timer counter 0 setup, running off external 32khz clock
    TCCR0 |= (1<<CS00);   //normal mode, no prescale
     f34:	83 b7       	in	r24, 0x33	; 51
     f36:	81 60       	ori	r24, 0x01	; 1
     f38:	83 bf       	out	0x33, r24	; 51
    ASSR  |= (1<<AS0); //Asynchronous Clock
     f3a:	80 b7       	in	r24, 0x30	; 48
     f3c:	88 60       	ori	r24, 0x08	; 8
     f3e:	80 bf       	out	0x30, r24	; 48

    //timer counter 1 setup
    TCCR1A = 0;
     f40:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = (1<<WGM12) | (1<<CS11); //CTC Mode
     f42:	8a e0       	ldi	r24, 0x0A	; 10
     f44:	8e bd       	out	0x2e, r24	; 46
    OCR1A = 999;
     f46:	87 ee       	ldi	r24, 0xE7	; 231
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	9b bd       	out	0x2b, r25	; 43
     f4c:	8a bd       	out	0x2a, r24	; 42

    //timer counter 2 setup, fast PWM, 256 prescale, noninverting
    TCCR2 |= (1<<WGM20) | (1<<COM21) | (0<<COM20) | (1<<WGM21) | (1<<CS22) | (1<<CS21) | (1<<CS20);
     f4e:	85 b5       	in	r24, 0x25	; 37
     f50:	8f 66       	ori	r24, 0x6F	; 111
     f52:	85 bd       	out	0x25, r24	; 37
    
    //timer counter 3 setup
    TCCR3A = (1<<COM3A1) | (0<<COM3A0) | (1<<WGM31);
     f54:	82 e8       	ldi	r24, 0x82	; 130
     f56:	80 93 8b 00 	sts	0x008B, r24
    TCCR3B = (1<<WGM32) | (1<<WGM33) | (1<<CS31);
     f5a:	8a e1       	ldi	r24, 0x1A	; 26
     f5c:	80 93 8a 00 	sts	0x008A, r24
    OCR3A  = 61440 * volume;
     f60:	60 91 0c 01 	lds	r22, 0x010C
     f64:	70 91 0d 01 	lds	r23, 0x010D
     f68:	80 91 0e 01 	lds	r24, 0x010E
     f6c:	90 91 0f 01 	lds	r25, 0x010F
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e7       	ldi	r20, 0x70	; 112
     f76:	57 e4       	ldi	r21, 0x47	; 71
     f78:	0e 94 97 09 	call	0x132e	; 0x132e <__mulsf3>
     f7c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fixunssfsi>
     f80:	70 93 87 00 	sts	0x0087, r23
     f84:	60 93 86 00 	sts	0x0086, r22
    ICR3   = 0xF000;
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 ef       	ldi	r25, 0xF0	; 240
     f8c:	90 93 81 00 	sts	0x0081, r25
     f90:	80 93 80 00 	sts	0x0080, r24

	//ADC Initialization and associated ports
    DDRF &= ~(1<<DDF7);
     f94:	80 91 61 00 	lds	r24, 0x0061
     f98:	8f 77       	andi	r24, 0x7F	; 127
     f9a:	80 93 61 00 	sts	0x0061, r24
    PORTF &= ~(1<<PF7);
     f9e:	80 91 62 00 	lds	r24, 0x0062
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	80 93 62 00 	sts	0x0062, r24

    ADMUX = (0<<REFS1)|(1<<REFS0)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
     fa8:	87 e4       	ldi	r24, 0x47	; 71
     faa:	87 b9       	out	0x07, r24	; 7

    ADCSRA = (1<<ADEN)|(0<<ADFR)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     fac:	8f e8       	ldi	r24, 0x8F	; 143
     fae:	86 b9       	out	0x06, r24	; 6
 
    //Setup Ports
    DDRB |= 0b01110000; //set port bits 4-7 B as outputs
     fb0:	87 b3       	in	r24, 0x17	; 23
     fb2:	80 67       	ori	r24, 0x70	; 112
     fb4:	87 bb       	out	0x17, r24	; 23
    DDRC |= 0b00000000; //alarm is on pins 0 and 1
     fb6:	84 b3       	in	r24, 0x14	; 20
     fb8:	84 bb       	out	0x14, r24	; 20
    DDRD |= 0b11111111;
     fba:	81 b3       	in	r24, 0x11	; 17
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	81 bb       	out	0x11, r24	; 17
    DDRE |= 0b11111111;
     fc0:	92 b1       	in	r25, 0x02	; 2
     fc2:	82 b9       	out	0x02, r24	; 2
    
    PORTE |= 0x40;
     fc4:	1e 9a       	sbi	0x03, 6	; 3
    
    //sei();

	while(1){
        ADCSRA |= (1<<ADSC);
     fc6:	36 9a       	sbi	0x06, 6	; 6
        
        while(bit_is_clear(ADCSRA, ADIF)){};
     fc8:	34 9b       	sbis	0x06, 4	; 6
     fca:	fe cf       	rjmp	.-4      	; 0xfc8 <main+0xc6>
        
        ADCSRA |= (1<<ADIF);
     fcc:	34 9a       	sbi	0x06, 4	; 6
    
        adc_result = ADC;
     fce:	84 b1       	in	r24, 0x04	; 4
     fd0:	95 b1       	in	r25, 0x05	; 5
     fd2:	90 93 54 01 	sts	0x0154, r25
     fd6:	80 93 53 01 	sts	0x0153, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     fda:	4a e0       	ldi	r20, 0x0A	; 10
     fdc:	65 e5       	ldi	r22, 0x55	; 85
     fde:	71 e0       	ldi	r23, 0x01	; 1
     fe0:	0e 94 04 0a 	call	0x1408	; 0x1408 <__itoa_ncheck>
        itoa(adc_result, lcd_str, 10);           //convert non-fractional part to ascii strin
        //fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fraction
        //itoa(fp_low_result.quot, lcd_str_l, 10);           //convert fractional part to ascii string
        
        //send string to LCD
        string2lcd(lcd_str);  //write upper half
     fe4:	85 e5       	ldi	r24, 0x55	; 85
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	0e 94 45 05 	call	0xa8a	; 0xa8a <string2lcd>
        //char2lcd('.');          //write decimal point
        //string2lcd(lcd_str_l);  //write lower half
 
        for(i=0;i<=10;i++){ _delay_ms(50);}  //delay 0.5 sec
     fec:	10 92 3f 01 	sts	0x013F, r1
     ff0:	80 91 3f 01 	lds	r24, 0x013F
     ff4:	8b 30       	cpi	r24, 0x0B	; 11
     ff6:	90 f4       	brcc	.+36     	; 0x101c <main+0x11a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff8:	2f ef       	ldi	r18, 0xFF	; 255
     ffa:	80 e7       	ldi	r24, 0x70	; 112
     ffc:	92 e0       	ldi	r25, 0x02	; 2
     ffe:	21 50       	subi	r18, 0x01	; 1
    1000:	80 40       	sbci	r24, 0x00	; 0
    1002:	90 40       	sbci	r25, 0x00	; 0
    1004:	e1 f7       	brne	.-8      	; 0xffe <main+0xfc>
    1006:	00 c0       	rjmp	.+0      	; 0x1008 <main+0x106>
    1008:	00 00       	nop
    100a:	80 91 3f 01 	lds	r24, 0x013F
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	80 93 3f 01 	sts	0x013F, r24
    1014:	80 91 3f 01 	lds	r24, 0x013F
    1018:	8b 30       	cpi	r24, 0x0B	; 11
    101a:	70 f3       	brcs	.-36     	; 0xff8 <main+0xf6>
        clear_display();
    101c:	0e 94 0b 05 	call	0xa16	; 0xa16 <clear_display>
        cursor_home();
    1020:	0e 94 16 05 	call	0xa2c	; 0xa2c <cursor_home>

            PORTB = (i<<4);//send PORTB the digit to display
			_delay_ms(1);
		}
        #endif
  	}//while
    1024:	d0 cf       	rjmp	.-96     	; 0xfc6 <main+0xc4>

00001026 <__divmodhi4>:
    1026:	97 fb       	bst	r25, 7
    1028:	07 2e       	mov	r0, r23
    102a:	16 f4       	brtc	.+4      	; 0x1030 <__divmodhi4+0xa>
    102c:	00 94       	com	r0
    102e:	07 d0       	rcall	.+14     	; 0x103e <__divmodhi4_neg1>
    1030:	77 fd       	sbrc	r23, 7
    1032:	09 d0       	rcall	.+18     	; 0x1046 <__divmodhi4_neg2>
    1034:	0e 94 46 08 	call	0x108c	; 0x108c <__udivmodhi4>
    1038:	07 fc       	sbrc	r0, 7
    103a:	05 d0       	rcall	.+10     	; 0x1046 <__divmodhi4_neg2>
    103c:	3e f4       	brtc	.+14     	; 0x104c <__divmodhi4_exit>

0000103e <__divmodhi4_neg1>:
    103e:	90 95       	com	r25
    1040:	81 95       	neg	r24
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	08 95       	ret

00001046 <__divmodhi4_neg2>:
    1046:	70 95       	com	r23
    1048:	61 95       	neg	r22
    104a:	7f 4f       	sbci	r23, 0xFF	; 255

0000104c <__divmodhi4_exit>:
    104c:	08 95       	ret

0000104e <__divmodsi4>:
    104e:	05 2e       	mov	r0, r21
    1050:	97 fb       	bst	r25, 7
    1052:	1e f4       	brtc	.+6      	; 0x105a <__divmodsi4+0xc>
    1054:	00 94       	com	r0
    1056:	0e 94 3e 08 	call	0x107c	; 0x107c <__negsi2>
    105a:	57 fd       	sbrc	r21, 7
    105c:	07 d0       	rcall	.+14     	; 0x106c <__divmodsi4_neg2>
    105e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__udivmodsi4>
    1062:	07 fc       	sbrc	r0, 7
    1064:	03 d0       	rcall	.+6      	; 0x106c <__divmodsi4_neg2>
    1066:	4e f4       	brtc	.+18     	; 0x107a <__divmodsi4_exit>
    1068:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__negsi2>

0000106c <__divmodsi4_neg2>:
    106c:	50 95       	com	r21
    106e:	40 95       	com	r20
    1070:	30 95       	com	r19
    1072:	21 95       	neg	r18
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    1076:	4f 4f       	sbci	r20, 0xFF	; 255
    1078:	5f 4f       	sbci	r21, 0xFF	; 255

0000107a <__divmodsi4_exit>:
    107a:	08 95       	ret

0000107c <__negsi2>:
    107c:	90 95       	com	r25
    107e:	80 95       	com	r24
    1080:	70 95       	com	r23
    1082:	61 95       	neg	r22
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	08 95       	ret

0000108c <__udivmodhi4>:
    108c:	aa 1b       	sub	r26, r26
    108e:	bb 1b       	sub	r27, r27
    1090:	51 e1       	ldi	r21, 0x11	; 17
    1092:	07 c0       	rjmp	.+14     	; 0x10a2 <__udivmodhi4_ep>

00001094 <__udivmodhi4_loop>:
    1094:	aa 1f       	adc	r26, r26
    1096:	bb 1f       	adc	r27, r27
    1098:	a6 17       	cp	r26, r22
    109a:	b7 07       	cpc	r27, r23
    109c:	10 f0       	brcs	.+4      	; 0x10a2 <__udivmodhi4_ep>
    109e:	a6 1b       	sub	r26, r22
    10a0:	b7 0b       	sbc	r27, r23

000010a2 <__udivmodhi4_ep>:
    10a2:	88 1f       	adc	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	5a 95       	dec	r21
    10a8:	a9 f7       	brne	.-22     	; 0x1094 <__udivmodhi4_loop>
    10aa:	80 95       	com	r24
    10ac:	90 95       	com	r25
    10ae:	bc 01       	movw	r22, r24
    10b0:	cd 01       	movw	r24, r26
    10b2:	08 95       	ret

000010b4 <__udivmodsi4>:
    10b4:	a1 e2       	ldi	r26, 0x21	; 33
    10b6:	1a 2e       	mov	r1, r26
    10b8:	aa 1b       	sub	r26, r26
    10ba:	bb 1b       	sub	r27, r27
    10bc:	fd 01       	movw	r30, r26
    10be:	0d c0       	rjmp	.+26     	; 0x10da <__udivmodsi4_ep>

000010c0 <__udivmodsi4_loop>:
    10c0:	aa 1f       	adc	r26, r26
    10c2:	bb 1f       	adc	r27, r27
    10c4:	ee 1f       	adc	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	a2 17       	cp	r26, r18
    10ca:	b3 07       	cpc	r27, r19
    10cc:	e4 07       	cpc	r30, r20
    10ce:	f5 07       	cpc	r31, r21
    10d0:	20 f0       	brcs	.+8      	; 0x10da <__udivmodsi4_ep>
    10d2:	a2 1b       	sub	r26, r18
    10d4:	b3 0b       	sbc	r27, r19
    10d6:	e4 0b       	sbc	r30, r20
    10d8:	f5 0b       	sbc	r31, r21

000010da <__udivmodsi4_ep>:
    10da:	66 1f       	adc	r22, r22
    10dc:	77 1f       	adc	r23, r23
    10de:	88 1f       	adc	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	1a 94       	dec	r1
    10e4:	69 f7       	brne	.-38     	; 0x10c0 <__udivmodsi4_loop>
    10e6:	60 95       	com	r22
    10e8:	70 95       	com	r23
    10ea:	80 95       	com	r24
    10ec:	90 95       	com	r25
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	bd 01       	movw	r22, r26
    10f4:	cf 01       	movw	r24, r30
    10f6:	08 95       	ret

000010f8 <__subsf3>:
    10f8:	50 58       	subi	r21, 0x80	; 128

000010fa <__addsf3>:
    10fa:	bb 27       	eor	r27, r27
    10fc:	aa 27       	eor	r26, r26
    10fe:	0e 94 94 08 	call	0x1128	; 0x1128 <__addsf3x>
    1102:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_round>
    1106:	0e 94 4a 09 	call	0x1294	; 0x1294 <__fp_pscA>
    110a:	38 f0       	brcs	.+14     	; 0x111a <__stack+0x1b>
    110c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__fp_pscB>
    1110:	20 f0       	brcs	.+8      	; 0x111a <__stack+0x1b>
    1112:	39 f4       	brne	.+14     	; 0x1122 <__stack+0x23>
    1114:	9f 3f       	cpi	r25, 0xFF	; 255
    1116:	19 f4       	brne	.+6      	; 0x111e <__stack+0x1f>
    1118:	26 f4       	brtc	.+8      	; 0x1122 <__stack+0x23>
    111a:	0c 94 47 09 	jmp	0x128e	; 0x128e <__fp_nan>
    111e:	0e f4       	brtc	.+2      	; 0x1122 <__stack+0x23>
    1120:	e0 95       	com	r30
    1122:	e7 fb       	bst	r30, 7
    1124:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_inf>

00001128 <__addsf3x>:
    1128:	e9 2f       	mov	r30, r25
    112a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fp_split3>
    112e:	58 f3       	brcs	.-42     	; 0x1106 <__stack+0x7>
    1130:	ba 17       	cp	r27, r26
    1132:	62 07       	cpc	r22, r18
    1134:	73 07       	cpc	r23, r19
    1136:	84 07       	cpc	r24, r20
    1138:	95 07       	cpc	r25, r21
    113a:	20 f0       	brcs	.+8      	; 0x1144 <__addsf3x+0x1c>
    113c:	79 f4       	brne	.+30     	; 0x115c <__addsf3x+0x34>
    113e:	a6 f5       	brtc	.+104    	; 0x11a8 <__addsf3x+0x80>
    1140:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_zero>
    1144:	0e f4       	brtc	.+2      	; 0x1148 <__addsf3x+0x20>
    1146:	e0 95       	com	r30
    1148:	0b 2e       	mov	r0, r27
    114a:	ba 2f       	mov	r27, r26
    114c:	a0 2d       	mov	r26, r0
    114e:	0b 01       	movw	r0, r22
    1150:	b9 01       	movw	r22, r18
    1152:	90 01       	movw	r18, r0
    1154:	0c 01       	movw	r0, r24
    1156:	ca 01       	movw	r24, r20
    1158:	a0 01       	movw	r20, r0
    115a:	11 24       	eor	r1, r1
    115c:	ff 27       	eor	r31, r31
    115e:	59 1b       	sub	r21, r25
    1160:	99 f0       	breq	.+38     	; 0x1188 <__addsf3x+0x60>
    1162:	59 3f       	cpi	r21, 0xF9	; 249
    1164:	50 f4       	brcc	.+20     	; 0x117a <__addsf3x+0x52>
    1166:	50 3e       	cpi	r21, 0xE0	; 224
    1168:	68 f1       	brcs	.+90     	; 0x11c4 <__addsf3x+0x9c>
    116a:	1a 16       	cp	r1, r26
    116c:	f0 40       	sbci	r31, 0x00	; 0
    116e:	a2 2f       	mov	r26, r18
    1170:	23 2f       	mov	r18, r19
    1172:	34 2f       	mov	r19, r20
    1174:	44 27       	eor	r20, r20
    1176:	58 5f       	subi	r21, 0xF8	; 248
    1178:	f3 cf       	rjmp	.-26     	; 0x1160 <__addsf3x+0x38>
    117a:	46 95       	lsr	r20
    117c:	37 95       	ror	r19
    117e:	27 95       	ror	r18
    1180:	a7 95       	ror	r26
    1182:	f0 40       	sbci	r31, 0x00	; 0
    1184:	53 95       	inc	r21
    1186:	c9 f7       	brne	.-14     	; 0x117a <__addsf3x+0x52>
    1188:	7e f4       	brtc	.+30     	; 0x11a8 <__addsf3x+0x80>
    118a:	1f 16       	cp	r1, r31
    118c:	ba 0b       	sbc	r27, r26
    118e:	62 0b       	sbc	r22, r18
    1190:	73 0b       	sbc	r23, r19
    1192:	84 0b       	sbc	r24, r20
    1194:	ba f0       	brmi	.+46     	; 0x11c4 <__addsf3x+0x9c>
    1196:	91 50       	subi	r25, 0x01	; 1
    1198:	a1 f0       	breq	.+40     	; 0x11c2 <__addsf3x+0x9a>
    119a:	ff 0f       	add	r31, r31
    119c:	bb 1f       	adc	r27, r27
    119e:	66 1f       	adc	r22, r22
    11a0:	77 1f       	adc	r23, r23
    11a2:	88 1f       	adc	r24, r24
    11a4:	c2 f7       	brpl	.-16     	; 0x1196 <__addsf3x+0x6e>
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <__addsf3x+0x9c>
    11a8:	ba 0f       	add	r27, r26
    11aa:	62 1f       	adc	r22, r18
    11ac:	73 1f       	adc	r23, r19
    11ae:	84 1f       	adc	r24, r20
    11b0:	48 f4       	brcc	.+18     	; 0x11c4 <__addsf3x+0x9c>
    11b2:	87 95       	ror	r24
    11b4:	77 95       	ror	r23
    11b6:	67 95       	ror	r22
    11b8:	b7 95       	ror	r27
    11ba:	f7 95       	ror	r31
    11bc:	9e 3f       	cpi	r25, 0xFE	; 254
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__addsf3x+0x9a>
    11c0:	b0 cf       	rjmp	.-160    	; 0x1122 <__stack+0x23>
    11c2:	93 95       	inc	r25
    11c4:	88 0f       	add	r24, r24
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <__addsf3x+0xa2>
    11c8:	99 27       	eor	r25, r25
    11ca:	ee 0f       	add	r30, r30
    11cc:	97 95       	ror	r25
    11ce:	87 95       	ror	r24
    11d0:	08 95       	ret

000011d2 <__cmpsf2>:
    11d2:	0e 94 1d 09 	call	0x123a	; 0x123a <__fp_cmp>
    11d6:	08 f4       	brcc	.+2      	; 0x11da <__cmpsf2+0x8>
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	08 95       	ret

000011dc <__fixunssfsi>:
    11dc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_splitA>
    11e0:	88 f0       	brcs	.+34     	; 0x1204 <__fixunssfsi+0x28>
    11e2:	9f 57       	subi	r25, 0x7F	; 127
    11e4:	98 f0       	brcs	.+38     	; 0x120c <__fixunssfsi+0x30>
    11e6:	b9 2f       	mov	r27, r25
    11e8:	99 27       	eor	r25, r25
    11ea:	b7 51       	subi	r27, 0x17	; 23
    11ec:	b0 f0       	brcs	.+44     	; 0x121a <__fixunssfsi+0x3e>
    11ee:	e1 f0       	breq	.+56     	; 0x1228 <__fixunssfsi+0x4c>
    11f0:	66 0f       	add	r22, r22
    11f2:	77 1f       	adc	r23, r23
    11f4:	88 1f       	adc	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	1a f0       	brmi	.+6      	; 0x1200 <__fixunssfsi+0x24>
    11fa:	ba 95       	dec	r27
    11fc:	c9 f7       	brne	.-14     	; 0x11f0 <__fixunssfsi+0x14>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <__fixunssfsi+0x4c>
    1200:	b1 30       	cpi	r27, 0x01	; 1
    1202:	91 f0       	breq	.+36     	; 0x1228 <__fixunssfsi+0x4c>
    1204:	0e 94 8b 09 	call	0x1316	; 0x1316 <__fp_zero>
    1208:	b1 e0       	ldi	r27, 0x01	; 1
    120a:	08 95       	ret
    120c:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_zero>
    1210:	67 2f       	mov	r22, r23
    1212:	78 2f       	mov	r23, r24
    1214:	88 27       	eor	r24, r24
    1216:	b8 5f       	subi	r27, 0xF8	; 248
    1218:	39 f0       	breq	.+14     	; 0x1228 <__fixunssfsi+0x4c>
    121a:	b9 3f       	cpi	r27, 0xF9	; 249
    121c:	cc f3       	brlt	.-14     	; 0x1210 <__fixunssfsi+0x34>
    121e:	86 95       	lsr	r24
    1220:	77 95       	ror	r23
    1222:	67 95       	ror	r22
    1224:	b3 95       	inc	r27
    1226:	d9 f7       	brne	.-10     	; 0x121e <__fixunssfsi+0x42>
    1228:	3e f4       	brtc	.+14     	; 0x1238 <__fixunssfsi+0x5c>
    122a:	90 95       	com	r25
    122c:	80 95       	com	r24
    122e:	70 95       	com	r23
    1230:	61 95       	neg	r22
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	08 95       	ret

0000123a <__fp_cmp>:
    123a:	99 0f       	add	r25, r25
    123c:	00 08       	sbc	r0, r0
    123e:	55 0f       	add	r21, r21
    1240:	aa 0b       	sbc	r26, r26
    1242:	e0 e8       	ldi	r30, 0x80	; 128
    1244:	fe ef       	ldi	r31, 0xFE	; 254
    1246:	16 16       	cp	r1, r22
    1248:	17 06       	cpc	r1, r23
    124a:	e8 07       	cpc	r30, r24
    124c:	f9 07       	cpc	r31, r25
    124e:	c0 f0       	brcs	.+48     	; 0x1280 <__fp_cmp+0x46>
    1250:	12 16       	cp	r1, r18
    1252:	13 06       	cpc	r1, r19
    1254:	e4 07       	cpc	r30, r20
    1256:	f5 07       	cpc	r31, r21
    1258:	98 f0       	brcs	.+38     	; 0x1280 <__fp_cmp+0x46>
    125a:	62 1b       	sub	r22, r18
    125c:	73 0b       	sbc	r23, r19
    125e:	84 0b       	sbc	r24, r20
    1260:	95 0b       	sbc	r25, r21
    1262:	39 f4       	brne	.+14     	; 0x1272 <__fp_cmp+0x38>
    1264:	0a 26       	eor	r0, r26
    1266:	61 f0       	breq	.+24     	; 0x1280 <__fp_cmp+0x46>
    1268:	23 2b       	or	r18, r19
    126a:	24 2b       	or	r18, r20
    126c:	25 2b       	or	r18, r21
    126e:	21 f4       	brne	.+8      	; 0x1278 <__fp_cmp+0x3e>
    1270:	08 95       	ret
    1272:	0a 26       	eor	r0, r26
    1274:	09 f4       	brne	.+2      	; 0x1278 <__fp_cmp+0x3e>
    1276:	a1 40       	sbci	r26, 0x01	; 1
    1278:	a6 95       	lsr	r26
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	81 1d       	adc	r24, r1
    127e:	81 1d       	adc	r24, r1
    1280:	08 95       	ret

00001282 <__fp_inf>:
    1282:	97 f9       	bld	r25, 7
    1284:	9f 67       	ori	r25, 0x7F	; 127
    1286:	80 e8       	ldi	r24, 0x80	; 128
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	08 95       	ret

0000128e <__fp_nan>:
    128e:	9f ef       	ldi	r25, 0xFF	; 255
    1290:	80 ec       	ldi	r24, 0xC0	; 192
    1292:	08 95       	ret

00001294 <__fp_pscA>:
    1294:	00 24       	eor	r0, r0
    1296:	0a 94       	dec	r0
    1298:	16 16       	cp	r1, r22
    129a:	17 06       	cpc	r1, r23
    129c:	18 06       	cpc	r1, r24
    129e:	09 06       	cpc	r0, r25
    12a0:	08 95       	ret

000012a2 <__fp_pscB>:
    12a2:	00 24       	eor	r0, r0
    12a4:	0a 94       	dec	r0
    12a6:	12 16       	cp	r1, r18
    12a8:	13 06       	cpc	r1, r19
    12aa:	14 06       	cpc	r1, r20
    12ac:	05 06       	cpc	r0, r21
    12ae:	08 95       	ret

000012b0 <__fp_round>:
    12b0:	09 2e       	mov	r0, r25
    12b2:	03 94       	inc	r0
    12b4:	00 0c       	add	r0, r0
    12b6:	11 f4       	brne	.+4      	; 0x12bc <__fp_round+0xc>
    12b8:	88 23       	and	r24, r24
    12ba:	52 f0       	brmi	.+20     	; 0x12d0 <__fp_round+0x20>
    12bc:	bb 0f       	add	r27, r27
    12be:	40 f4       	brcc	.+16     	; 0x12d0 <__fp_round+0x20>
    12c0:	bf 2b       	or	r27, r31
    12c2:	11 f4       	brne	.+4      	; 0x12c8 <__fp_round+0x18>
    12c4:	60 ff       	sbrs	r22, 0
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <__fp_round+0x20>
    12c8:	6f 5f       	subi	r22, 0xFF	; 255
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	08 95       	ret

000012d2 <__fp_split3>:
    12d2:	57 fd       	sbrc	r21, 7
    12d4:	90 58       	subi	r25, 0x80	; 128
    12d6:	44 0f       	add	r20, r20
    12d8:	55 1f       	adc	r21, r21
    12da:	59 f0       	breq	.+22     	; 0x12f2 <__fp_splitA+0x10>
    12dc:	5f 3f       	cpi	r21, 0xFF	; 255
    12de:	71 f0       	breq	.+28     	; 0x12fc <__fp_splitA+0x1a>
    12e0:	47 95       	ror	r20

000012e2 <__fp_splitA>:
    12e2:	88 0f       	add	r24, r24
    12e4:	97 fb       	bst	r25, 7
    12e6:	99 1f       	adc	r25, r25
    12e8:	61 f0       	breq	.+24     	; 0x1302 <__fp_splitA+0x20>
    12ea:	9f 3f       	cpi	r25, 0xFF	; 255
    12ec:	79 f0       	breq	.+30     	; 0x130c <__fp_splitA+0x2a>
    12ee:	87 95       	ror	r24
    12f0:	08 95       	ret
    12f2:	12 16       	cp	r1, r18
    12f4:	13 06       	cpc	r1, r19
    12f6:	14 06       	cpc	r1, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	f2 cf       	rjmp	.-28     	; 0x12e0 <__fp_split3+0xe>
    12fc:	46 95       	lsr	r20
    12fe:	f1 df       	rcall	.-30     	; 0x12e2 <__fp_splitA>
    1300:	08 c0       	rjmp	.+16     	; 0x1312 <__fp_splitA+0x30>
    1302:	16 16       	cp	r1, r22
    1304:	17 06       	cpc	r1, r23
    1306:	18 06       	cpc	r1, r24
    1308:	99 1f       	adc	r25, r25
    130a:	f1 cf       	rjmp	.-30     	; 0x12ee <__fp_splitA+0xc>
    130c:	86 95       	lsr	r24
    130e:	71 05       	cpc	r23, r1
    1310:	61 05       	cpc	r22, r1
    1312:	08 94       	sec
    1314:	08 95       	ret

00001316 <__fp_zero>:
    1316:	e8 94       	clt

00001318 <__fp_szero>:
    1318:	bb 27       	eor	r27, r27
    131a:	66 27       	eor	r22, r22
    131c:	77 27       	eor	r23, r23
    131e:	cb 01       	movw	r24, r22
    1320:	97 f9       	bld	r25, 7
    1322:	08 95       	ret

00001324 <__gesf2>:
    1324:	0e 94 1d 09 	call	0x123a	; 0x123a <__fp_cmp>
    1328:	08 f4       	brcc	.+2      	; 0x132c <__gesf2+0x8>
    132a:	8f ef       	ldi	r24, 0xFF	; 255
    132c:	08 95       	ret

0000132e <__mulsf3>:
    132e:	0e 94 aa 09 	call	0x1354	; 0x1354 <__mulsf3x>
    1332:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_round>
    1336:	0e 94 4a 09 	call	0x1294	; 0x1294 <__fp_pscA>
    133a:	38 f0       	brcs	.+14     	; 0x134a <__mulsf3+0x1c>
    133c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__fp_pscB>
    1340:	20 f0       	brcs	.+8      	; 0x134a <__mulsf3+0x1c>
    1342:	95 23       	and	r25, r21
    1344:	11 f0       	breq	.+4      	; 0x134a <__mulsf3+0x1c>
    1346:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_inf>
    134a:	0c 94 47 09 	jmp	0x128e	; 0x128e <__fp_nan>
    134e:	11 24       	eor	r1, r1
    1350:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_szero>

00001354 <__mulsf3x>:
    1354:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__fp_split3>
    1358:	70 f3       	brcs	.-36     	; 0x1336 <__mulsf3+0x8>

0000135a <__mulsf3_pse>:
    135a:	95 9f       	mul	r25, r21
    135c:	c1 f3       	breq	.-16     	; 0x134e <__mulsf3+0x20>
    135e:	95 0f       	add	r25, r21
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	55 1f       	adc	r21, r21
    1364:	62 9f       	mul	r22, r18
    1366:	f0 01       	movw	r30, r0
    1368:	72 9f       	mul	r23, r18
    136a:	bb 27       	eor	r27, r27
    136c:	f0 0d       	add	r31, r0
    136e:	b1 1d       	adc	r27, r1
    1370:	63 9f       	mul	r22, r19
    1372:	aa 27       	eor	r26, r26
    1374:	f0 0d       	add	r31, r0
    1376:	b1 1d       	adc	r27, r1
    1378:	aa 1f       	adc	r26, r26
    137a:	64 9f       	mul	r22, r20
    137c:	66 27       	eor	r22, r22
    137e:	b0 0d       	add	r27, r0
    1380:	a1 1d       	adc	r26, r1
    1382:	66 1f       	adc	r22, r22
    1384:	82 9f       	mul	r24, r18
    1386:	22 27       	eor	r18, r18
    1388:	b0 0d       	add	r27, r0
    138a:	a1 1d       	adc	r26, r1
    138c:	62 1f       	adc	r22, r18
    138e:	73 9f       	mul	r23, r19
    1390:	b0 0d       	add	r27, r0
    1392:	a1 1d       	adc	r26, r1
    1394:	62 1f       	adc	r22, r18
    1396:	83 9f       	mul	r24, r19
    1398:	a0 0d       	add	r26, r0
    139a:	61 1d       	adc	r22, r1
    139c:	22 1f       	adc	r18, r18
    139e:	74 9f       	mul	r23, r20
    13a0:	33 27       	eor	r19, r19
    13a2:	a0 0d       	add	r26, r0
    13a4:	61 1d       	adc	r22, r1
    13a6:	23 1f       	adc	r18, r19
    13a8:	84 9f       	mul	r24, r20
    13aa:	60 0d       	add	r22, r0
    13ac:	21 1d       	adc	r18, r1
    13ae:	82 2f       	mov	r24, r18
    13b0:	76 2f       	mov	r23, r22
    13b2:	6a 2f       	mov	r22, r26
    13b4:	11 24       	eor	r1, r1
    13b6:	9f 57       	subi	r25, 0x7F	; 127
    13b8:	50 40       	sbci	r21, 0x00	; 0
    13ba:	9a f0       	brmi	.+38     	; 0x13e2 <__mulsf3_pse+0x88>
    13bc:	f1 f0       	breq	.+60     	; 0x13fa <__mulsf3_pse+0xa0>
    13be:	88 23       	and	r24, r24
    13c0:	4a f0       	brmi	.+18     	; 0x13d4 <__mulsf3_pse+0x7a>
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	bb 1f       	adc	r27, r27
    13c8:	66 1f       	adc	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	91 50       	subi	r25, 0x01	; 1
    13d0:	50 40       	sbci	r21, 0x00	; 0
    13d2:	a9 f7       	brne	.-22     	; 0x13be <__mulsf3_pse+0x64>
    13d4:	9e 3f       	cpi	r25, 0xFE	; 254
    13d6:	51 05       	cpc	r21, r1
    13d8:	80 f0       	brcs	.+32     	; 0x13fa <__mulsf3_pse+0xa0>
    13da:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_inf>
    13de:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_szero>
    13e2:	5f 3f       	cpi	r21, 0xFF	; 255
    13e4:	e4 f3       	brlt	.-8      	; 0x13de <__mulsf3_pse+0x84>
    13e6:	98 3e       	cpi	r25, 0xE8	; 232
    13e8:	d4 f3       	brlt	.-12     	; 0x13de <__mulsf3_pse+0x84>
    13ea:	86 95       	lsr	r24
    13ec:	77 95       	ror	r23
    13ee:	67 95       	ror	r22
    13f0:	b7 95       	ror	r27
    13f2:	f7 95       	ror	r31
    13f4:	e7 95       	ror	r30
    13f6:	9f 5f       	subi	r25, 0xFF	; 255
    13f8:	c1 f7       	brne	.-16     	; 0x13ea <__mulsf3_pse+0x90>
    13fa:	fe 2b       	or	r31, r30
    13fc:	88 0f       	add	r24, r24
    13fe:	91 1d       	adc	r25, r1
    1400:	96 95       	lsr	r25
    1402:	87 95       	ror	r24
    1404:	97 f9       	bld	r25, 7
    1406:	08 95       	ret

00001408 <__itoa_ncheck>:
    1408:	bb 27       	eor	r27, r27
    140a:	4a 30       	cpi	r20, 0x0A	; 10
    140c:	31 f4       	brne	.+12     	; 0x141a <__itoa_ncheck+0x12>
    140e:	99 23       	and	r25, r25
    1410:	22 f4       	brpl	.+8      	; 0x141a <__itoa_ncheck+0x12>
    1412:	bd e2       	ldi	r27, 0x2D	; 45
    1414:	90 95       	com	r25
    1416:	81 95       	neg	r24
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__utoa_common>

0000141e <__utoa_ncheck>:
    141e:	bb 27       	eor	r27, r27

00001420 <__utoa_common>:
    1420:	fb 01       	movw	r30, r22
    1422:	55 27       	eor	r21, r21
    1424:	aa 27       	eor	r26, r26
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	aa 1f       	adc	r26, r26
    142c:	a4 17       	cp	r26, r20
    142e:	10 f0       	brcs	.+4      	; 0x1434 <__utoa_common+0x14>
    1430:	a4 1b       	sub	r26, r20
    1432:	83 95       	inc	r24
    1434:	50 51       	subi	r21, 0x10	; 16
    1436:	b9 f7       	brne	.-18     	; 0x1426 <__utoa_common+0x6>
    1438:	a0 5d       	subi	r26, 0xD0	; 208
    143a:	aa 33       	cpi	r26, 0x3A	; 58
    143c:	08 f0       	brcs	.+2      	; 0x1440 <__utoa_common+0x20>
    143e:	a9 5d       	subi	r26, 0xD9	; 217
    1440:	a1 93       	st	Z+, r26
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	79 f7       	brne	.-34     	; 0x1424 <__utoa_common+0x4>
    1446:	b1 11       	cpse	r27, r1
    1448:	b1 93       	st	Z+, r27
    144a:	11 92       	st	Z+, r1
    144c:	cb 01       	movw	r24, r22
    144e:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <strrev>

00001452 <sprintf>:
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	2e 97       	sbiw	r28, 0x0e	; 14
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	0d 89       	ldd	r16, Y+21	; 0x15
    146c:	1e 89       	ldd	r17, Y+22	; 0x16
    146e:	86 e0       	ldi	r24, 0x06	; 6
    1470:	8c 83       	std	Y+4, r24	; 0x04
    1472:	1a 83       	std	Y+2, r17	; 0x02
    1474:	09 83       	std	Y+1, r16	; 0x01
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f e7       	ldi	r25, 0x7F	; 127
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	8d 83       	std	Y+5, r24	; 0x05
    147e:	ae 01       	movw	r20, r28
    1480:	47 5e       	subi	r20, 0xE7	; 231
    1482:	5f 4f       	sbci	r21, 0xFF	; 255
    1484:	6f 89       	ldd	r22, Y+23	; 0x17
    1486:	78 8d       	ldd	r23, Y+24	; 0x18
    1488:	ce 01       	movw	r24, r28
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <vfprintf>
    1490:	2f 81       	ldd	r18, Y+7	; 0x07
    1492:	38 85       	ldd	r19, Y+8	; 0x08
    1494:	f8 01       	movw	r30, r16
    1496:	e2 0f       	add	r30, r18
    1498:	f3 1f       	adc	r31, r19
    149a:	10 82       	st	Z, r1
    149c:	2e 96       	adiw	r28, 0x0e	; 14
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	08 95       	ret

000014b2 <vfprintf>:
    14b2:	2f 92       	push	r2
    14b4:	3f 92       	push	r3
    14b6:	4f 92       	push	r4
    14b8:	5f 92       	push	r5
    14ba:	6f 92       	push	r6
    14bc:	7f 92       	push	r7
    14be:	8f 92       	push	r8
    14c0:	9f 92       	push	r9
    14c2:	af 92       	push	r10
    14c4:	bf 92       	push	r11
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	2c 97       	sbiw	r28, 0x0c	; 12
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	7c 01       	movw	r14, r24
    14e8:	6b 01       	movw	r12, r22
    14ea:	8a 01       	movw	r16, r20
    14ec:	fc 01       	movw	r30, r24
    14ee:	17 82       	std	Z+7, r1	; 0x07
    14f0:	16 82       	std	Z+6, r1	; 0x06
    14f2:	83 81       	ldd	r24, Z+3	; 0x03
    14f4:	81 ff       	sbrs	r24, 1
    14f6:	bd c1       	rjmp	.+890    	; 0x1872 <vfprintf+0x3c0>
    14f8:	ce 01       	movw	r24, r28
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	4c 01       	movw	r8, r24
    14fe:	f7 01       	movw	r30, r14
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	f6 01       	movw	r30, r12
    1504:	93 fd       	sbrc	r25, 3
    1506:	85 91       	lpm	r24, Z+
    1508:	93 ff       	sbrs	r25, 3
    150a:	81 91       	ld	r24, Z+
    150c:	6f 01       	movw	r12, r30
    150e:	88 23       	and	r24, r24
    1510:	09 f4       	brne	.+2      	; 0x1514 <vfprintf+0x62>
    1512:	ab c1       	rjmp	.+854    	; 0x186a <vfprintf+0x3b8>
    1514:	85 32       	cpi	r24, 0x25	; 37
    1516:	39 f4       	brne	.+14     	; 0x1526 <vfprintf+0x74>
    1518:	93 fd       	sbrc	r25, 3
    151a:	85 91       	lpm	r24, Z+
    151c:	93 ff       	sbrs	r25, 3
    151e:	81 91       	ld	r24, Z+
    1520:	6f 01       	movw	r12, r30
    1522:	85 32       	cpi	r24, 0x25	; 37
    1524:	29 f4       	brne	.+10     	; 0x1530 <vfprintf+0x7e>
    1526:	b7 01       	movw	r22, r14
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <fputc>
    152e:	e7 cf       	rjmp	.-50     	; 0x14fe <vfprintf+0x4c>
    1530:	51 2c       	mov	r5, r1
    1532:	31 2c       	mov	r3, r1
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	20 32       	cpi	r18, 0x20	; 32
    1538:	a0 f4       	brcc	.+40     	; 0x1562 <vfprintf+0xb0>
    153a:	8b 32       	cpi	r24, 0x2B	; 43
    153c:	69 f0       	breq	.+26     	; 0x1558 <vfprintf+0xa6>
    153e:	30 f4       	brcc	.+12     	; 0x154c <vfprintf+0x9a>
    1540:	80 32       	cpi	r24, 0x20	; 32
    1542:	59 f0       	breq	.+22     	; 0x155a <vfprintf+0xa8>
    1544:	83 32       	cpi	r24, 0x23	; 35
    1546:	69 f4       	brne	.+26     	; 0x1562 <vfprintf+0xb0>
    1548:	20 61       	ori	r18, 0x10	; 16
    154a:	2c c0       	rjmp	.+88     	; 0x15a4 <vfprintf+0xf2>
    154c:	8d 32       	cpi	r24, 0x2D	; 45
    154e:	39 f0       	breq	.+14     	; 0x155e <vfprintf+0xac>
    1550:	80 33       	cpi	r24, 0x30	; 48
    1552:	39 f4       	brne	.+14     	; 0x1562 <vfprintf+0xb0>
    1554:	21 60       	ori	r18, 0x01	; 1
    1556:	26 c0       	rjmp	.+76     	; 0x15a4 <vfprintf+0xf2>
    1558:	22 60       	ori	r18, 0x02	; 2
    155a:	24 60       	ori	r18, 0x04	; 4
    155c:	23 c0       	rjmp	.+70     	; 0x15a4 <vfprintf+0xf2>
    155e:	28 60       	ori	r18, 0x08	; 8
    1560:	21 c0       	rjmp	.+66     	; 0x15a4 <vfprintf+0xf2>
    1562:	27 fd       	sbrc	r18, 7
    1564:	27 c0       	rjmp	.+78     	; 0x15b4 <vfprintf+0x102>
    1566:	30 ed       	ldi	r19, 0xD0	; 208
    1568:	38 0f       	add	r19, r24
    156a:	3a 30       	cpi	r19, 0x0A	; 10
    156c:	78 f4       	brcc	.+30     	; 0x158c <vfprintf+0xda>
    156e:	26 ff       	sbrs	r18, 6
    1570:	06 c0       	rjmp	.+12     	; 0x157e <vfprintf+0xcc>
    1572:	fa e0       	ldi	r31, 0x0A	; 10
    1574:	5f 9e       	mul	r5, r31
    1576:	30 0d       	add	r19, r0
    1578:	11 24       	eor	r1, r1
    157a:	53 2e       	mov	r5, r19
    157c:	13 c0       	rjmp	.+38     	; 0x15a4 <vfprintf+0xf2>
    157e:	8a e0       	ldi	r24, 0x0A	; 10
    1580:	38 9e       	mul	r3, r24
    1582:	30 0d       	add	r19, r0
    1584:	11 24       	eor	r1, r1
    1586:	33 2e       	mov	r3, r19
    1588:	20 62       	ori	r18, 0x20	; 32
    158a:	0c c0       	rjmp	.+24     	; 0x15a4 <vfprintf+0xf2>
    158c:	8e 32       	cpi	r24, 0x2E	; 46
    158e:	21 f4       	brne	.+8      	; 0x1598 <vfprintf+0xe6>
    1590:	26 fd       	sbrc	r18, 6
    1592:	6b c1       	rjmp	.+726    	; 0x186a <vfprintf+0x3b8>
    1594:	20 64       	ori	r18, 0x40	; 64
    1596:	06 c0       	rjmp	.+12     	; 0x15a4 <vfprintf+0xf2>
    1598:	8c 36       	cpi	r24, 0x6C	; 108
    159a:	11 f4       	brne	.+4      	; 0x15a0 <vfprintf+0xee>
    159c:	20 68       	ori	r18, 0x80	; 128
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <vfprintf+0xf2>
    15a0:	88 36       	cpi	r24, 0x68	; 104
    15a2:	41 f4       	brne	.+16     	; 0x15b4 <vfprintf+0x102>
    15a4:	f6 01       	movw	r30, r12
    15a6:	93 fd       	sbrc	r25, 3
    15a8:	85 91       	lpm	r24, Z+
    15aa:	93 ff       	sbrs	r25, 3
    15ac:	81 91       	ld	r24, Z+
    15ae:	6f 01       	movw	r12, r30
    15b0:	81 11       	cpse	r24, r1
    15b2:	c1 cf       	rjmp	.-126    	; 0x1536 <vfprintf+0x84>
    15b4:	98 2f       	mov	r25, r24
    15b6:	9f 7d       	andi	r25, 0xDF	; 223
    15b8:	95 54       	subi	r25, 0x45	; 69
    15ba:	93 30       	cpi	r25, 0x03	; 3
    15bc:	28 f4       	brcc	.+10     	; 0x15c8 <vfprintf+0x116>
    15be:	0c 5f       	subi	r16, 0xFC	; 252
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
    15c2:	ff e3       	ldi	r31, 0x3F	; 63
    15c4:	f9 83       	std	Y+1, r31	; 0x01
    15c6:	0d c0       	rjmp	.+26     	; 0x15e2 <vfprintf+0x130>
    15c8:	83 36       	cpi	r24, 0x63	; 99
    15ca:	31 f0       	breq	.+12     	; 0x15d8 <vfprintf+0x126>
    15cc:	83 37       	cpi	r24, 0x73	; 115
    15ce:	71 f0       	breq	.+28     	; 0x15ec <vfprintf+0x13a>
    15d0:	83 35       	cpi	r24, 0x53	; 83
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <vfprintf+0x124>
    15d4:	5b c0       	rjmp	.+182    	; 0x168c <vfprintf+0x1da>
    15d6:	22 c0       	rjmp	.+68     	; 0x161c <vfprintf+0x16a>
    15d8:	f8 01       	movw	r30, r16
    15da:	80 81       	ld	r24, Z
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	0e 5f       	subi	r16, 0xFE	; 254
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	44 24       	eor	r4, r4
    15e4:	43 94       	inc	r4
    15e6:	51 2c       	mov	r5, r1
    15e8:	54 01       	movw	r10, r8
    15ea:	15 c0       	rjmp	.+42     	; 0x1616 <vfprintf+0x164>
    15ec:	38 01       	movw	r6, r16
    15ee:	f2 e0       	ldi	r31, 0x02	; 2
    15f0:	6f 0e       	add	r6, r31
    15f2:	71 1c       	adc	r7, r1
    15f4:	f8 01       	movw	r30, r16
    15f6:	a0 80       	ld	r10, Z
    15f8:	b1 80       	ldd	r11, Z+1	; 0x01
    15fa:	26 ff       	sbrs	r18, 6
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <vfprintf+0x152>
    15fe:	65 2d       	mov	r22, r5
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <vfprintf+0x156>
    1604:	6f ef       	ldi	r22, 0xFF	; 255
    1606:	7f ef       	ldi	r23, 0xFF	; 255
    1608:	c5 01       	movw	r24, r10
    160a:	2c 87       	std	Y+12, r18	; 0x0c
    160c:	0e 94 5f 0c 	call	0x18be	; 0x18be <strnlen>
    1610:	2c 01       	movw	r4, r24
    1612:	83 01       	movw	r16, r6
    1614:	2c 85       	ldd	r18, Y+12	; 0x0c
    1616:	2f 77       	andi	r18, 0x7F	; 127
    1618:	22 2e       	mov	r2, r18
    161a:	17 c0       	rjmp	.+46     	; 0x164a <vfprintf+0x198>
    161c:	38 01       	movw	r6, r16
    161e:	f2 e0       	ldi	r31, 0x02	; 2
    1620:	6f 0e       	add	r6, r31
    1622:	71 1c       	adc	r7, r1
    1624:	f8 01       	movw	r30, r16
    1626:	a0 80       	ld	r10, Z
    1628:	b1 80       	ldd	r11, Z+1	; 0x01
    162a:	26 ff       	sbrs	r18, 6
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <vfprintf+0x182>
    162e:	65 2d       	mov	r22, r5
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <vfprintf+0x186>
    1634:	6f ef       	ldi	r22, 0xFF	; 255
    1636:	7f ef       	ldi	r23, 0xFF	; 255
    1638:	c5 01       	movw	r24, r10
    163a:	2c 87       	std	Y+12, r18	; 0x0c
    163c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <strnlen_P>
    1640:	2c 01       	movw	r4, r24
    1642:	2c 85       	ldd	r18, Y+12	; 0x0c
    1644:	20 68       	ori	r18, 0x80	; 128
    1646:	22 2e       	mov	r2, r18
    1648:	83 01       	movw	r16, r6
    164a:	23 fc       	sbrc	r2, 3
    164c:	1b c0       	rjmp	.+54     	; 0x1684 <vfprintf+0x1d2>
    164e:	83 2d       	mov	r24, r3
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	48 16       	cp	r4, r24
    1654:	59 06       	cpc	r5, r25
    1656:	b0 f4       	brcc	.+44     	; 0x1684 <vfprintf+0x1d2>
    1658:	b7 01       	movw	r22, r14
    165a:	80 e2       	ldi	r24, 0x20	; 32
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <fputc>
    1662:	3a 94       	dec	r3
    1664:	f4 cf       	rjmp	.-24     	; 0x164e <vfprintf+0x19c>
    1666:	f5 01       	movw	r30, r10
    1668:	27 fc       	sbrc	r2, 7
    166a:	85 91       	lpm	r24, Z+
    166c:	27 fe       	sbrs	r2, 7
    166e:	81 91       	ld	r24, Z+
    1670:	5f 01       	movw	r10, r30
    1672:	b7 01       	movw	r22, r14
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <fputc>
    167a:	31 10       	cpse	r3, r1
    167c:	3a 94       	dec	r3
    167e:	f1 e0       	ldi	r31, 0x01	; 1
    1680:	4f 1a       	sub	r4, r31
    1682:	51 08       	sbc	r5, r1
    1684:	41 14       	cp	r4, r1
    1686:	51 04       	cpc	r5, r1
    1688:	71 f7       	brne	.-36     	; 0x1666 <vfprintf+0x1b4>
    168a:	e5 c0       	rjmp	.+458    	; 0x1856 <vfprintf+0x3a4>
    168c:	84 36       	cpi	r24, 0x64	; 100
    168e:	11 f0       	breq	.+4      	; 0x1694 <vfprintf+0x1e2>
    1690:	89 36       	cpi	r24, 0x69	; 105
    1692:	39 f5       	brne	.+78     	; 0x16e2 <vfprintf+0x230>
    1694:	f8 01       	movw	r30, r16
    1696:	27 ff       	sbrs	r18, 7
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <vfprintf+0x1f6>
    169a:	60 81       	ld	r22, Z
    169c:	71 81       	ldd	r23, Z+1	; 0x01
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	0c 5f       	subi	r16, 0xFC	; 252
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <vfprintf+0x206>
    16a8:	60 81       	ld	r22, Z
    16aa:	71 81       	ldd	r23, Z+1	; 0x01
    16ac:	07 2e       	mov	r0, r23
    16ae:	00 0c       	add	r0, r0
    16b0:	88 0b       	sbc	r24, r24
    16b2:	99 0b       	sbc	r25, r25
    16b4:	0e 5f       	subi	r16, 0xFE	; 254
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	2f 76       	andi	r18, 0x6F	; 111
    16ba:	72 2e       	mov	r7, r18
    16bc:	97 ff       	sbrs	r25, 7
    16be:	09 c0       	rjmp	.+18     	; 0x16d2 <vfprintf+0x220>
    16c0:	90 95       	com	r25
    16c2:	80 95       	com	r24
    16c4:	70 95       	com	r23
    16c6:	61 95       	neg	r22
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	8f 4f       	sbci	r24, 0xFF	; 255
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	20 68       	ori	r18, 0x80	; 128
    16d0:	72 2e       	mov	r7, r18
    16d2:	2a e0       	ldi	r18, 0x0A	; 10
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	a4 01       	movw	r20, r8
    16d8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__ultoa_invert>
    16dc:	a8 2e       	mov	r10, r24
    16de:	a8 18       	sub	r10, r8
    16e0:	44 c0       	rjmp	.+136    	; 0x176a <vfprintf+0x2b8>
    16e2:	85 37       	cpi	r24, 0x75	; 117
    16e4:	29 f4       	brne	.+10     	; 0x16f0 <vfprintf+0x23e>
    16e6:	2f 7e       	andi	r18, 0xEF	; 239
    16e8:	b2 2e       	mov	r11, r18
    16ea:	2a e0       	ldi	r18, 0x0A	; 10
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	25 c0       	rjmp	.+74     	; 0x173a <vfprintf+0x288>
    16f0:	f2 2f       	mov	r31, r18
    16f2:	f9 7f       	andi	r31, 0xF9	; 249
    16f4:	bf 2e       	mov	r11, r31
    16f6:	8f 36       	cpi	r24, 0x6F	; 111
    16f8:	c1 f0       	breq	.+48     	; 0x172a <vfprintf+0x278>
    16fa:	18 f4       	brcc	.+6      	; 0x1702 <vfprintf+0x250>
    16fc:	88 35       	cpi	r24, 0x58	; 88
    16fe:	79 f0       	breq	.+30     	; 0x171e <vfprintf+0x26c>
    1700:	b4 c0       	rjmp	.+360    	; 0x186a <vfprintf+0x3b8>
    1702:	80 37       	cpi	r24, 0x70	; 112
    1704:	19 f0       	breq	.+6      	; 0x170c <vfprintf+0x25a>
    1706:	88 37       	cpi	r24, 0x78	; 120
    1708:	21 f0       	breq	.+8      	; 0x1712 <vfprintf+0x260>
    170a:	af c0       	rjmp	.+350    	; 0x186a <vfprintf+0x3b8>
    170c:	2f 2f       	mov	r18, r31
    170e:	20 61       	ori	r18, 0x10	; 16
    1710:	b2 2e       	mov	r11, r18
    1712:	b4 fe       	sbrs	r11, 4
    1714:	0d c0       	rjmp	.+26     	; 0x1730 <vfprintf+0x27e>
    1716:	8b 2d       	mov	r24, r11
    1718:	84 60       	ori	r24, 0x04	; 4
    171a:	b8 2e       	mov	r11, r24
    171c:	09 c0       	rjmp	.+18     	; 0x1730 <vfprintf+0x27e>
    171e:	24 ff       	sbrs	r18, 4
    1720:	0a c0       	rjmp	.+20     	; 0x1736 <vfprintf+0x284>
    1722:	9f 2f       	mov	r25, r31
    1724:	96 60       	ori	r25, 0x06	; 6
    1726:	b9 2e       	mov	r11, r25
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <vfprintf+0x284>
    172a:	28 e0       	ldi	r18, 0x08	; 8
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	05 c0       	rjmp	.+10     	; 0x173a <vfprintf+0x288>
    1730:	20 e1       	ldi	r18, 0x10	; 16
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <vfprintf+0x288>
    1736:	20 e1       	ldi	r18, 0x10	; 16
    1738:	32 e0       	ldi	r19, 0x02	; 2
    173a:	f8 01       	movw	r30, r16
    173c:	b7 fe       	sbrs	r11, 7
    173e:	07 c0       	rjmp	.+14     	; 0x174e <vfprintf+0x29c>
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	0c 5f       	subi	r16, 0xFC	; 252
    174a:	1f 4f       	sbci	r17, 0xFF	; 255
    174c:	06 c0       	rjmp	.+12     	; 0x175a <vfprintf+0x2a8>
    174e:	60 81       	ld	r22, Z
    1750:	71 81       	ldd	r23, Z+1	; 0x01
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 5f       	subi	r16, 0xFE	; 254
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	a4 01       	movw	r20, r8
    175c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__ultoa_invert>
    1760:	a8 2e       	mov	r10, r24
    1762:	a8 18       	sub	r10, r8
    1764:	fb 2d       	mov	r31, r11
    1766:	ff 77       	andi	r31, 0x7F	; 127
    1768:	7f 2e       	mov	r7, r31
    176a:	76 fe       	sbrs	r7, 6
    176c:	0b c0       	rjmp	.+22     	; 0x1784 <vfprintf+0x2d2>
    176e:	37 2d       	mov	r19, r7
    1770:	3e 7f       	andi	r19, 0xFE	; 254
    1772:	a5 14       	cp	r10, r5
    1774:	50 f4       	brcc	.+20     	; 0x178a <vfprintf+0x2d8>
    1776:	74 fe       	sbrs	r7, 4
    1778:	0a c0       	rjmp	.+20     	; 0x178e <vfprintf+0x2dc>
    177a:	72 fc       	sbrc	r7, 2
    177c:	08 c0       	rjmp	.+16     	; 0x178e <vfprintf+0x2dc>
    177e:	37 2d       	mov	r19, r7
    1780:	3e 7e       	andi	r19, 0xEE	; 238
    1782:	05 c0       	rjmp	.+10     	; 0x178e <vfprintf+0x2dc>
    1784:	ba 2c       	mov	r11, r10
    1786:	37 2d       	mov	r19, r7
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <vfprintf+0x2de>
    178a:	ba 2c       	mov	r11, r10
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <vfprintf+0x2de>
    178e:	b5 2c       	mov	r11, r5
    1790:	34 ff       	sbrs	r19, 4
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <vfprintf+0x2fc>
    1794:	fe 01       	movw	r30, r28
    1796:	ea 0d       	add	r30, r10
    1798:	f1 1d       	adc	r31, r1
    179a:	80 81       	ld	r24, Z
    179c:	80 33       	cpi	r24, 0x30	; 48
    179e:	11 f4       	brne	.+4      	; 0x17a4 <vfprintf+0x2f2>
    17a0:	39 7e       	andi	r19, 0xE9	; 233
    17a2:	09 c0       	rjmp	.+18     	; 0x17b6 <vfprintf+0x304>
    17a4:	32 ff       	sbrs	r19, 2
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <vfprintf+0x302>
    17a8:	b3 94       	inc	r11
    17aa:	b3 94       	inc	r11
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <vfprintf+0x304>
    17ae:	83 2f       	mov	r24, r19
    17b0:	86 78       	andi	r24, 0x86	; 134
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <vfprintf+0x304>
    17b4:	b3 94       	inc	r11
    17b6:	33 fd       	sbrc	r19, 3
    17b8:	13 c0       	rjmp	.+38     	; 0x17e0 <vfprintf+0x32e>
    17ba:	30 ff       	sbrs	r19, 0
    17bc:	06 c0       	rjmp	.+12     	; 0x17ca <vfprintf+0x318>
    17be:	5a 2c       	mov	r5, r10
    17c0:	b3 14       	cp	r11, r3
    17c2:	18 f4       	brcc	.+6      	; 0x17ca <vfprintf+0x318>
    17c4:	53 0c       	add	r5, r3
    17c6:	5b 18       	sub	r5, r11
    17c8:	b3 2c       	mov	r11, r3
    17ca:	b3 14       	cp	r11, r3
    17cc:	68 f4       	brcc	.+26     	; 0x17e8 <vfprintf+0x336>
    17ce:	b7 01       	movw	r22, r14
    17d0:	80 e2       	ldi	r24, 0x20	; 32
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	3c 87       	std	Y+12, r19	; 0x0c
    17d6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <fputc>
    17da:	b3 94       	inc	r11
    17dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    17de:	f5 cf       	rjmp	.-22     	; 0x17ca <vfprintf+0x318>
    17e0:	b3 14       	cp	r11, r3
    17e2:	10 f4       	brcc	.+4      	; 0x17e8 <vfprintf+0x336>
    17e4:	3b 18       	sub	r3, r11
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <vfprintf+0x338>
    17e8:	31 2c       	mov	r3, r1
    17ea:	34 ff       	sbrs	r19, 4
    17ec:	12 c0       	rjmp	.+36     	; 0x1812 <vfprintf+0x360>
    17ee:	b7 01       	movw	r22, r14
    17f0:	80 e3       	ldi	r24, 0x30	; 48
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	3c 87       	std	Y+12, r19	; 0x0c
    17f6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <fputc>
    17fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    17fc:	32 ff       	sbrs	r19, 2
    17fe:	17 c0       	rjmp	.+46     	; 0x182e <vfprintf+0x37c>
    1800:	31 fd       	sbrc	r19, 1
    1802:	03 c0       	rjmp	.+6      	; 0x180a <vfprintf+0x358>
    1804:	88 e7       	ldi	r24, 0x78	; 120
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <vfprintf+0x35c>
    180a:	88 e5       	ldi	r24, 0x58	; 88
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	b7 01       	movw	r22, r14
    1810:	0c c0       	rjmp	.+24     	; 0x182a <vfprintf+0x378>
    1812:	83 2f       	mov	r24, r19
    1814:	86 78       	andi	r24, 0x86	; 134
    1816:	59 f0       	breq	.+22     	; 0x182e <vfprintf+0x37c>
    1818:	31 ff       	sbrs	r19, 1
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <vfprintf+0x36e>
    181c:	8b e2       	ldi	r24, 0x2B	; 43
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <vfprintf+0x370>
    1820:	80 e2       	ldi	r24, 0x20	; 32
    1822:	37 fd       	sbrc	r19, 7
    1824:	8d e2       	ldi	r24, 0x2D	; 45
    1826:	b7 01       	movw	r22, r14
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <fputc>
    182e:	a5 14       	cp	r10, r5
    1830:	38 f4       	brcc	.+14     	; 0x1840 <vfprintf+0x38e>
    1832:	b7 01       	movw	r22, r14
    1834:	80 e3       	ldi	r24, 0x30	; 48
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <fputc>
    183c:	5a 94       	dec	r5
    183e:	f7 cf       	rjmp	.-18     	; 0x182e <vfprintf+0x37c>
    1840:	aa 94       	dec	r10
    1842:	f4 01       	movw	r30, r8
    1844:	ea 0d       	add	r30, r10
    1846:	f1 1d       	adc	r31, r1
    1848:	80 81       	ld	r24, Z
    184a:	b7 01       	movw	r22, r14
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <fputc>
    1852:	a1 10       	cpse	r10, r1
    1854:	f5 cf       	rjmp	.-22     	; 0x1840 <vfprintf+0x38e>
    1856:	33 20       	and	r3, r3
    1858:	09 f4       	brne	.+2      	; 0x185c <vfprintf+0x3aa>
    185a:	51 ce       	rjmp	.-862    	; 0x14fe <vfprintf+0x4c>
    185c:	b7 01       	movw	r22, r14
    185e:	80 e2       	ldi	r24, 0x20	; 32
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <fputc>
    1866:	3a 94       	dec	r3
    1868:	f6 cf       	rjmp	.-20     	; 0x1856 <vfprintf+0x3a4>
    186a:	f7 01       	movw	r30, r14
    186c:	86 81       	ldd	r24, Z+6	; 0x06
    186e:	97 81       	ldd	r25, Z+7	; 0x07
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <vfprintf+0x3c4>
    1872:	8f ef       	ldi	r24, 0xFF	; 255
    1874:	9f ef       	ldi	r25, 0xFF	; 255
    1876:	2c 96       	adiw	r28, 0x0c	; 12
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	df 90       	pop	r13
    1890:	cf 90       	pop	r12
    1892:	bf 90       	pop	r11
    1894:	af 90       	pop	r10
    1896:	9f 90       	pop	r9
    1898:	8f 90       	pop	r8
    189a:	7f 90       	pop	r7
    189c:	6f 90       	pop	r6
    189e:	5f 90       	pop	r5
    18a0:	4f 90       	pop	r4
    18a2:	3f 90       	pop	r3
    18a4:	2f 90       	pop	r2
    18a6:	08 95       	ret

000018a8 <strnlen_P>:
    18a8:	fc 01       	movw	r30, r24
    18aa:	05 90       	lpm	r0, Z+
    18ac:	61 50       	subi	r22, 0x01	; 1
    18ae:	70 40       	sbci	r23, 0x00	; 0
    18b0:	01 10       	cpse	r0, r1
    18b2:	d8 f7       	brcc	.-10     	; 0x18aa <strnlen_P+0x2>
    18b4:	80 95       	com	r24
    18b6:	90 95       	com	r25
    18b8:	8e 0f       	add	r24, r30
    18ba:	9f 1f       	adc	r25, r31
    18bc:	08 95       	ret

000018be <strnlen>:
    18be:	fc 01       	movw	r30, r24
    18c0:	61 50       	subi	r22, 0x01	; 1
    18c2:	70 40       	sbci	r23, 0x00	; 0
    18c4:	01 90       	ld	r0, Z+
    18c6:	01 10       	cpse	r0, r1
    18c8:	d8 f7       	brcc	.-10     	; 0x18c0 <strnlen+0x2>
    18ca:	80 95       	com	r24
    18cc:	90 95       	com	r25
    18ce:	8e 0f       	add	r24, r30
    18d0:	9f 1f       	adc	r25, r31
    18d2:	08 95       	ret

000018d4 <strrev>:
    18d4:	dc 01       	movw	r26, r24
    18d6:	fc 01       	movw	r30, r24
    18d8:	67 2f       	mov	r22, r23
    18da:	71 91       	ld	r23, Z+
    18dc:	77 23       	and	r23, r23
    18de:	e1 f7       	brne	.-8      	; 0x18d8 <strrev+0x4>
    18e0:	32 97       	sbiw	r30, 0x02	; 2
    18e2:	04 c0       	rjmp	.+8      	; 0x18ec <strrev+0x18>
    18e4:	7c 91       	ld	r23, X
    18e6:	6d 93       	st	X+, r22
    18e8:	70 83       	st	Z, r23
    18ea:	62 91       	ld	r22, -Z
    18ec:	ae 17       	cp	r26, r30
    18ee:	bf 07       	cpc	r27, r31
    18f0:	c8 f3       	brcs	.-14     	; 0x18e4 <strrev+0x10>
    18f2:	08 95       	ret

000018f4 <fputc>:
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	fb 01       	movw	r30, r22
    18fe:	23 81       	ldd	r18, Z+3	; 0x03
    1900:	21 fd       	sbrc	r18, 1
    1902:	03 c0       	rjmp	.+6      	; 0x190a <fputc+0x16>
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	9f ef       	ldi	r25, 0xFF	; 255
    1908:	28 c0       	rjmp	.+80     	; 0x195a <fputc+0x66>
    190a:	22 ff       	sbrs	r18, 2
    190c:	16 c0       	rjmp	.+44     	; 0x193a <fputc+0x46>
    190e:	46 81       	ldd	r20, Z+6	; 0x06
    1910:	57 81       	ldd	r21, Z+7	; 0x07
    1912:	24 81       	ldd	r18, Z+4	; 0x04
    1914:	35 81       	ldd	r19, Z+5	; 0x05
    1916:	42 17       	cp	r20, r18
    1918:	53 07       	cpc	r21, r19
    191a:	44 f4       	brge	.+16     	; 0x192c <fputc+0x38>
    191c:	a0 81       	ld	r26, Z
    191e:	b1 81       	ldd	r27, Z+1	; 0x01
    1920:	9d 01       	movw	r18, r26
    1922:	2f 5f       	subi	r18, 0xFF	; 255
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	31 83       	std	Z+1, r19	; 0x01
    1928:	20 83       	st	Z, r18
    192a:	8c 93       	st	X, r24
    192c:	26 81       	ldd	r18, Z+6	; 0x06
    192e:	37 81       	ldd	r19, Z+7	; 0x07
    1930:	2f 5f       	subi	r18, 0xFF	; 255
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	37 83       	std	Z+7, r19	; 0x07
    1936:	26 83       	std	Z+6, r18	; 0x06
    1938:	10 c0       	rjmp	.+32     	; 0x195a <fputc+0x66>
    193a:	eb 01       	movw	r28, r22
    193c:	09 2f       	mov	r16, r25
    193e:	18 2f       	mov	r17, r24
    1940:	00 84       	ldd	r0, Z+8	; 0x08
    1942:	f1 85       	ldd	r31, Z+9	; 0x09
    1944:	e0 2d       	mov	r30, r0
    1946:	09 95       	icall
    1948:	89 2b       	or	r24, r25
    194a:	e1 f6       	brne	.-72     	; 0x1904 <fputc+0x10>
    194c:	8e 81       	ldd	r24, Y+6	; 0x06
    194e:	9f 81       	ldd	r25, Y+7	; 0x07
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	9f 83       	std	Y+7, r25	; 0x07
    1954:	8e 83       	std	Y+6, r24	; 0x06
    1956:	81 2f       	mov	r24, r17
    1958:	90 2f       	mov	r25, r16
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <__ultoa_invert>:
    1964:	fa 01       	movw	r30, r20
    1966:	aa 27       	eor	r26, r26
    1968:	28 30       	cpi	r18, 0x08	; 8
    196a:	51 f1       	breq	.+84     	; 0x19c0 <__ultoa_invert+0x5c>
    196c:	20 31       	cpi	r18, 0x10	; 16
    196e:	81 f1       	breq	.+96     	; 0x19d0 <__ultoa_invert+0x6c>
    1970:	e8 94       	clt
    1972:	6f 93       	push	r22
    1974:	6e 7f       	andi	r22, 0xFE	; 254
    1976:	6e 5f       	subi	r22, 0xFE	; 254
    1978:	7f 4f       	sbci	r23, 0xFF	; 255
    197a:	8f 4f       	sbci	r24, 0xFF	; 255
    197c:	9f 4f       	sbci	r25, 0xFF	; 255
    197e:	af 4f       	sbci	r26, 0xFF	; 255
    1980:	b1 e0       	ldi	r27, 0x01	; 1
    1982:	3e d0       	rcall	.+124    	; 0x1a00 <__ultoa_invert+0x9c>
    1984:	b4 e0       	ldi	r27, 0x04	; 4
    1986:	3c d0       	rcall	.+120    	; 0x1a00 <__ultoa_invert+0x9c>
    1988:	67 0f       	add	r22, r23
    198a:	78 1f       	adc	r23, r24
    198c:	89 1f       	adc	r24, r25
    198e:	9a 1f       	adc	r25, r26
    1990:	a1 1d       	adc	r26, r1
    1992:	68 0f       	add	r22, r24
    1994:	79 1f       	adc	r23, r25
    1996:	8a 1f       	adc	r24, r26
    1998:	91 1d       	adc	r25, r1
    199a:	a1 1d       	adc	r26, r1
    199c:	6a 0f       	add	r22, r26
    199e:	71 1d       	adc	r23, r1
    19a0:	81 1d       	adc	r24, r1
    19a2:	91 1d       	adc	r25, r1
    19a4:	a1 1d       	adc	r26, r1
    19a6:	20 d0       	rcall	.+64     	; 0x19e8 <__ultoa_invert+0x84>
    19a8:	09 f4       	brne	.+2      	; 0x19ac <__ultoa_invert+0x48>
    19aa:	68 94       	set
    19ac:	3f 91       	pop	r19
    19ae:	2a e0       	ldi	r18, 0x0A	; 10
    19b0:	26 9f       	mul	r18, r22
    19b2:	11 24       	eor	r1, r1
    19b4:	30 19       	sub	r19, r0
    19b6:	30 5d       	subi	r19, 0xD0	; 208
    19b8:	31 93       	st	Z+, r19
    19ba:	de f6       	brtc	.-74     	; 0x1972 <__ultoa_invert+0xe>
    19bc:	cf 01       	movw	r24, r30
    19be:	08 95       	ret
    19c0:	46 2f       	mov	r20, r22
    19c2:	47 70       	andi	r20, 0x07	; 7
    19c4:	40 5d       	subi	r20, 0xD0	; 208
    19c6:	41 93       	st	Z+, r20
    19c8:	b3 e0       	ldi	r27, 0x03	; 3
    19ca:	0f d0       	rcall	.+30     	; 0x19ea <__ultoa_invert+0x86>
    19cc:	c9 f7       	brne	.-14     	; 0x19c0 <__ultoa_invert+0x5c>
    19ce:	f6 cf       	rjmp	.-20     	; 0x19bc <__ultoa_invert+0x58>
    19d0:	46 2f       	mov	r20, r22
    19d2:	4f 70       	andi	r20, 0x0F	; 15
    19d4:	40 5d       	subi	r20, 0xD0	; 208
    19d6:	4a 33       	cpi	r20, 0x3A	; 58
    19d8:	18 f0       	brcs	.+6      	; 0x19e0 <__ultoa_invert+0x7c>
    19da:	49 5d       	subi	r20, 0xD9	; 217
    19dc:	31 fd       	sbrc	r19, 1
    19de:	40 52       	subi	r20, 0x20	; 32
    19e0:	41 93       	st	Z+, r20
    19e2:	02 d0       	rcall	.+4      	; 0x19e8 <__ultoa_invert+0x84>
    19e4:	a9 f7       	brne	.-22     	; 0x19d0 <__ultoa_invert+0x6c>
    19e6:	ea cf       	rjmp	.-44     	; 0x19bc <__ultoa_invert+0x58>
    19e8:	b4 e0       	ldi	r27, 0x04	; 4
    19ea:	a6 95       	lsr	r26
    19ec:	97 95       	ror	r25
    19ee:	87 95       	ror	r24
    19f0:	77 95       	ror	r23
    19f2:	67 95       	ror	r22
    19f4:	ba 95       	dec	r27
    19f6:	c9 f7       	brne	.-14     	; 0x19ea <__ultoa_invert+0x86>
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	61 05       	cpc	r22, r1
    19fc:	71 05       	cpc	r23, r1
    19fe:	08 95       	ret
    1a00:	9b 01       	movw	r18, r22
    1a02:	ac 01       	movw	r20, r24
    1a04:	0a 2e       	mov	r0, r26
    1a06:	06 94       	lsr	r0
    1a08:	57 95       	ror	r21
    1a0a:	47 95       	ror	r20
    1a0c:	37 95       	ror	r19
    1a0e:	27 95       	ror	r18
    1a10:	ba 95       	dec	r27
    1a12:	c9 f7       	brne	.-14     	; 0x1a06 <__ultoa_invert+0xa2>
    1a14:	62 0f       	add	r22, r18
    1a16:	73 1f       	adc	r23, r19
    1a18:	84 1f       	adc	r24, r20
    1a1a:	95 1f       	adc	r25, r21
    1a1c:	a0 1d       	adc	r26, r0
    1a1e:	08 95       	ret

00001a20 <_exit>:
    1a20:	f8 94       	cli

00001a22 <__stop_program>:
    1a22:	ff cf       	rjmp	.-2      	; 0x1a22 <__stop_program>
